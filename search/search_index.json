{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#imouapi","title":"imouapi","text":"<p>This python library helps in interacting with Imou Life Open API for remote controlling programmatically your Imou devices, especially those settings such as motion detection, human detection, privacy, etc that can be changed by the Imou Life App only.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Provide classes for both low level API interaction as well as device and sensors abastractions</li> <li>Exceptions and error handling</li> <li>Based on asyncio module</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<ul> <li>Install the library with <code>pip install imouapi</code></li> <li>Register a developer account on Imou Life Open API and get your <code>appId</code> and <code>appSecret</code></li> <li>Instantiate the Imou API client (<code>from imouapi.api import ImouAPIClient</code>) and initialize it (e.g. <code>api_client = ImouAPIClient(app_id, app_secret, session)</code>)</li> <li>Discover registered devices by importing the Discover service (<code>from imouapi.device import ImouDiscoverService</code>), inializing it (e.g. <code>discover_service = ImouDiscoverService(api_client)</code>) and running a discovery (e.g. <code>discovered_devices = await discover_service.async_discover_devices()</code>)</li> <li>Either use the high level API by importing the Imou Device class (<code>from imouapi.device import ImouDevice</code>) and initializing it (e.g. <code>device = ImouDevice(api_client, device_id)</code>) or using directly the low level API provided by <code>ImouAPIClient</code> to interact with the device</li> </ul> <p>Full details on the installation process, requirements, usage and classes and methods made available by the library are available at https://user2684.github.io/imouapi</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#1015-2024-01-27","title":"[1.0.15] (2024-01-27)","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>sqlalchemy dependency causing HACS failing the installation of the library</li> </ul>"},{"location":"changelog/#1014-2023-12-24","title":"[1.0.14] (2023-12-24)","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Added channelId in the payload when calling <code>async_api_setDeviceCameraStatus()</code></li> <li><code>async_discover_devices()</code> now ignores with a warning unrecognized/unsupported devices instead of throwing an exception</li> <li>Updated dependencies and upgraded to Python 3.11</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Type errors</li> </ul>"},{"location":"changelog/#1013-2023-02-19","title":"[1.0.13] (2023-02-19)","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Support for<code>getDevicePowerInfo</code> Imou API through <code>async_api_getDevicePowerInfo()</code> and CLI commands</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Motion Detect sensor added regardless of the capabilities</li> </ul>"},{"location":"changelog/#1012-2022-12-11","title":"[1.0.12] (2022-12-11)","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Dormant device logic</li> </ul>"},{"location":"changelog/#1011-2022-12-11","title":"[1.0.11] (2022-12-11)","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li><code>sleepable</code>, <code>status</code> attributes and <code>get_sleepable()</code>, <code>get_status()</code>, <code>async_refresh_status()</code>, <code>async_wakeup()</code> functions to <code>ImouDevice</code></li> <li><code>status</code> sensor</li> <li><code>get_api_client()</code> <code>set_wait_after_wakeup()</code>, <code>get_wait_after_wakeup()</code>, <code>set_camera_wait_before_download()</code>, <code>get_camera_wait_before_download()</code> to <code>ImouDevice</code></li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Device is now marked online if either online or dormant</li> </ul>"},{"location":"changelog/#1010-2022-12-03","title":"[1.0.10] (2022-12-03)","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Support for <code>setDeviceSnapEnhanced</code>, <code>bindDeviceLive</code>, <code>queryLiveStatus</code>, <code>liveList</code>, <code>unbindLive</code> Imou APIs through  <code>`async_api_setDeviceSnapEnhanced()</code>, <code>async_api_bindDeviceLive()</code>, <code>async_api_getLiveStreamInfo()</code>, <code>async_apiliveList()</code>, <code>async_api_unbindLive()</code> and CLI commands</li> <li><code>async_get_image()</code> and <code>async_get_stream_url()</code> to <code>ImouCamera</code> class and CLI commands <code>get_camera_image</code> and <code>get_camera_stream</code></li> </ul>"},{"location":"changelog/#109-2022-11-26","title":"[1.0.9] (2022-11-26)","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li><code>ImouCamera</code> class exposing <code>async_service_ptz_location()</code> and <code>async_service_ptz_move()</code></li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Usage page of the documentation</li> </ul>"},{"location":"changelog/#108-2022-11-26","title":"[1.0.8] (2022-11-26)","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Support for <code>devicePTZInfo</code>, <code>controlLocationPTZ</code>, <code>controlMovePTZ</code> Imou APIs through  <code>`async_api_devicePTZInfo()</code>, <code>async_api_controlLocationPTZ()</code>, <code>async_api_controlMovePTZ()</code> and CLI commands</li> </ul>"},{"location":"changelog/#107-2022-11-20","title":"[1.0.7] (2022-11-20)","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li><code>ImouSiren</code> class, <code>get_siren()</code> and <code>set_siren()</code> to cli</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li><code>siren</code> switch, now implemented as <code>ImouSiren</code></li> </ul>"},{"location":"changelog/#106-2022-11-19","title":"[1.0.6] (2022-11-19)","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Attributes to <code>ImouEntity</code> class and <code>get_attributes()</code></li> <li><code>motionDetection</code> binary sensor and <code>refreshAlarm</code> button</li> </ul>"},{"location":"changelog/#removed_1","title":"Removed","text":"<ul> <li><code>lastAlarm</code> sensor</li> </ul>"},{"location":"changelog/#105-2022-11-13","title":"[1.0.5] (2022-11-13)","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Support for <code>restartDevice</code>, <code>deviceSdcardStatus</code> Imou APIs through <code>async_api_restartDevice()</code>, <code>async_api_deviceSdcardStatus()</code> and CLI commands</li> <li>Support for \"Activate Siren\" switch</li> <li><code>ImouButton</code> class and <code>restartDevice</code>, <code>refreshData</code> buttons</li> <li>Support for <code>press_button</code> to CLI</li> <li>Support for <code>callbackUrl</code> sensor</li> <li><code>set_device()</code> function to <code>ImouEntity</code></li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Reviewed switches' labels</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Storage used sensor now reporting None when SD card is not present</li> </ul>"},{"location":"changelog/#104-2022-10-22","title":"[1.0.4] (2022-10-22)","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li><code>ImouSelect</code> class and support for <code>nightVisionMode</code> select</li> <li><code>get_select</code> and <code>set_select</code> commands to CLI</li> <li><code>pushNotifications</code> switch</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Sensors (not only switches) are now added based on the available capabilities</li> </ul>"},{"location":"changelog/#103-2022-10-22","title":"[1.0.3] (2022-10-22)","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>Support for not documented <code>WLM</code> capability</li> <li>Support for undocumented capabilities or capabilities inherited from other capabilities</li> <li>Support for <code>deviceOpenList</code>, <code>deviceOpenBaseDetailList</code>, <code>listDeviceAbility</code>, <code>deviceStorage</code>, <code>getNightVisionMode</code>, <code>setNightVisionMode</code>, <code>getMessageCallback</code>, <code>setMessageCallback</code> APIs through <code>async_api_deviceOpenList()</code>, <code>async_api_deviceOpenBaseDetailList()</code>, <code>async_api_listDeviceAbility()</code>, <code>async_api_deviceStorage()</code>, <code>async_api_getNightVisionMode()</code>, <code>async_api_setNightVisionMode()</code>, <code>async_api_getMessageCallback()</code>, <code>async_api_getMessageCallbackOn()</code>, <code>async_api_setMessageCallbackOff()</code></li> <li><code>api_deviceBaseList</code>, <code>api_deviceOpenList</code>, <code>api_deviceBaseDetailList</code>, <code>api_deviceOpenDetailList</code>, <code>api_getDeviceCameraStatus</code>, <code>api_setDeviceCameraStatus</code>, <code>api_listDeviceAbility</code>, <code>api_getAlarmMessage</code>, <code>api_deviceStorage</code>, <code>api_getNightVisionMode</code>, <code>api_setNightVisionMode</code>, <code>api_getMessageCallback</code>, <code>api_getMessageCallbackOn</code>, <code>api_getMessageCallbackOff</code> commands to CLI</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li><code>async_api_getAlarmMessage()</code> now returning the last 10 alarms of the month, not just the last one</li> </ul>"},{"location":"changelog/#removed_2","title":"Removed","text":"<ul> <li><code>get_device_class()</code> from <code>ImouSensor</code></li> </ul>"},{"location":"changelog/#102-2022-10-19","title":"[1.0.2] (2022-10-19)","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Switches mapping to versioned capabilities are now created (e.g. audioEncodeControl for capability AudioEncodeControlV2)</li> </ul>"},{"location":"changelog/#101-2022-10-16","title":"[1.0.1] (2022-10-16)","text":""},{"location":"changelog/#added_10","title":"Added","text":"<ul> <li><code>get_diagnostics()</code> method to <code>ImouDevice</code> class</li> <li><code>get_diagnostics</code> command to CLI</li> </ul>"},{"location":"changelog/#100-2022-10-15","title":"[1.0.0] (2022-10-15)","text":""},{"location":"changelog/#added_11","title":"Added","text":"<ul> <li><code>--log-http-requests</code> option to CLI</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Last Alarm sensor unable to retrieve most recent alarms</li> <li>Last Alarm sensor shifted ahead by the local timezone</li> </ul>"},{"location":"changelog/#022-2022-10-07","title":"[0.2.2] (2022-10-07)","text":""},{"location":"changelog/#added_12","title":"Added","text":"<ul> <li>Test cases for most of the classes</li> </ul>"},{"location":"changelog/#021-2022-10-04","title":"[0.2.1] (2022-10-04)","text":""},{"location":"changelog/#added_13","title":"Added","text":"<ul> <li>Test cases for <code>ImouAPIClient</code></li> <li>Access Token expiration handling</li> </ul>"},{"location":"changelog/#020-2022-10-03","title":"[0.2.0] (2022-10-03)","text":""},{"location":"changelog/#added_14","title":"Added","text":"<ul> <li><code>get_sensor_by_name()</code> and <code>get_all_sensors()</code> added to <code>ImouDevice</code> class</li> </ul>"},{"location":"changelog/#changed_7","title":"Changed","text":"<ul> <li><code>ImouDiscoverService</code> and <code>ImouDevice</code> now take an instance of <code>ImouAPIClient</code> to initialize</li> <li>In <code>ImouDiscoverService</code> and <code>ImouDevice</code>, moved <code>base_url</code> and <code>timeout</code> from constructor to function <code>set_base_url()</code> and <code>set_timeout()</code></li> <li>There is no more concept of supported switches, all of those discovered, are made available and can be controlled</li> <li>Sensors' icons moved out of the this library since not applicable in this context</li> <li><code>ImouDevice</code> <code>get_sensors()</code> renamed in <code>get_sensors_by_platform()</code></li> <li>If connection failes, multiple retries are done</li> <li>Partial refactoring of the code</li> </ul>"},{"location":"changelog/#removed_3","title":"Removed","text":"<ul> <li><code>async_connect()</code> from both <code>ImouDevice</code> and <code>ImouDiscoverService</code>. Connection takes place at the first API call</li> </ul>"},{"location":"changelog/#015-2022-09-28","title":"[0.1.5] (2022-09-28)","text":""},{"location":"changelog/#added_15","title":"Added","text":"<ul> <li><code>ImouAPIClient.log_http_requests()</code> for enabling http request/response logging (off by default)</li> <li>If http logging is enabled, log messages are redacted from sensitive information</li> <li>ImouAPIClient.redact_log_message() for enabling log redaction (on by default)</li> </ul>"},{"location":"changelog/#changed_8","title":"Changed","text":"<ul> <li>Moved info logs into debug level</li> <li>By default, with debug level, no more logging HTTP requests and responses</li> </ul>"},{"location":"changelog/#014-2022-09-28","title":"[0.1.4] (2022-09-28)","text":""},{"location":"changelog/#added_16","title":"Added","text":"<ul> <li>Github workflow to publish on PyPI</li> </ul>"},{"location":"changelog/#changed_9","title":"Changed","text":"<ul> <li>Updated documentation</li> </ul>"},{"location":"changelog/#013-2022-09-27","title":"[0.1.3] (2022-09-27)","text":""},{"location":"changelog/#changed_10","title":"Changed","text":"<ul> <li>API base URL and API timeout are not optional parameters and can be provided by the user</li> <li>Updated CLI, added logging level</li> <li>Updated documentation</li> </ul>"},{"location":"changelog/#012-2022-09-27","title":"[0.1.2] (2022-09-27)","text":""},{"location":"changelog/#changed_11","title":"Changed","text":"<ul> <li>Re-organized the file structure</li> <li>Updated documentation</li> </ul>"},{"location":"changelog/#011-2022-09-27","title":"[0.1.1] (2022-09-27)","text":""},{"location":"changelog/#added_17","title":"Added","text":"<ul> <li>First development release</li> </ul>"},{"location":"changelog/#010-2022-09-26","title":"[0.1.0] (2022-09-26)","text":""},{"location":"changelog/#added_18","title":"Added","text":"<ul> <li>First commit</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/user2684/imouapi/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>imouapi could always use more documentation, whether as part of the official imouapi docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/user2684/imouapi/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up <code>imouapi</code> for local development.</p> <ol> <li>Fork the <code>imouapi</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>$ git clone git@github.com:your_name_here/imouapi.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>$ poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>$ poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check    https://github.com/user2684/imouapi/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>$ poetry run pytest tests/test_imouapi.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>$ poetry run bump2version patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install imouapi, run this command in your terminal:</p> <pre><code>$ pip install imouapi\n</code></pre> <p>This is the preferred method to install imouapi, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for imouapi can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/user2684/imouapi\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/user2684/imouapi/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"requirements/","title":"Requirements","text":"<p>A valid Imou Open API <code>App Id</code> and <code>App Secret</code> are required to use the library.</p> <p>In order to get them:</p> <ul> <li>Register an account on Imou Life if not done already</li> <li>Register a developer account on https://open.imoulife.com</li> <li>Open the Imou Console at https://open.imoulife.com/consoleNew/myApp/appInfo</li> <li>Go to \"My App\", \"App Information\" and click on Edit</li> <li>Fill in the required information and copy your AppId and AppSecret</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>You can use the library in three different ways:</p>"},{"location":"usage/#option-1-high-level-api-recommended","title":"Option 1: high-level API (Recommended)","text":"<p>An abstraction over the API has been built to provide representations of devices and sensors:</p> <ul> <li><code>imouapi.device</code> provides <code>ImouDevice</code> to represent an Imou devices and all its sensors and <code>ImouDiscoverService</code> which can be used to discover devices registered with the account</li> <li><code>imouapi.device_entity</code> provides <code>ImouSensor</code>, <code>ImouBinarySensor</code> , <code>ImouSwitch</code> , etc. representing the sensors attached to the device. Upon loading, the library is capable of enumerating available capabilities of the device and instantiate only the switches that the device suports. The API of course allows to eventually control those switches.</li> </ul> <p>Examples on how to interact with ImouDevice and ImouDiscoverService are provided in the CLI implementation.</p>"},{"location":"usage/#option-2-low-level-api","title":"Option 2: low-level API","text":"<p>With <code>from imouapi.api import ImouAPIClient</code> and calling the provided methods for connecting and calling API endpoints. Details on the supported APIs are provided in each module's documentation. Examples on how to interact with ImouAPIClient is provided in the high-level API implementation.</p>"},{"location":"usage/#option-3-cli","title":"Option 3: CLI","text":"<p>A command line interface is provided for testing and troubleshooting purposes. To get a list of supported commands and options run the following: <pre><code>python -m imouapi.cli --help\n</code></pre></p>"},{"location":"usage/#exception-handling","title":"Exception Handling","text":"<p>The library provides a simplified way for handling exceptions: <pre><code>from imouapi.exceptions import ImouException\n\ntry:\n    await device.async_initialize()\nexcept ImouException as exception:\n    _LOGGER.error(exception.to_string())\n    raise ImouException() from exception\n</code></pre></p> <p>The <code>ImouException</code> class provides a <code>to_string()</code> method which returns the name of the exception which was raised and the full stacktrace.</p>"},{"location":"modules/api/","title":"api","text":"<p>Low-level API for interacting with Imou devices.</p>"},{"location":"modules/api/#imouapi.api.ImouAPIClient","title":"<code>ImouAPIClient</code>","text":"<p>Interact with IMOU API.</p> Source code in <code>imouapi/api.py</code> <pre><code>class ImouAPIClient:\n    \"\"\"Interact with IMOU API.\"\"\"\n\n    def __init__(self, app_id: str, app_secret: str, session: ClientSession) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo\n            app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo\n            session: aiohttp client session\n        \"\"\"\n        self._app_id = app_id\n        self._app_secret = app_secret\n        self._session = session\n\n        self._base_url = API_URL\n        self._timeout = DEFAULT_TIMEOUT\n        self._log_http_requests_enabled = False\n        self._redact_log_message_enabled = True\n\n        self._access_token = None\n        self._access_token_expire_time = None\n        self._connected = False\n        self._retries = 1\n        _LOGGER.debug(\"Initialized. Endpoint URL: %s\", self._base_url)\n\n    def _redact_log_message(self, data: str) -&gt; str:\n        \"\"\"Redact log messages to remove sensitive information.\"\"\"\n        if not self._redact_log_message_enabled:\n            return data\n        for keyword in (\n            \"appId\",\n            \"sign\",\n            \"token\",\n            \"accessToken\",\n            \"playToken\",\n            \"thumbUrl\",\n            \"picUrl\",\n        ):\n            for tick in ('\"', \"'\"):\n                data = re.sub(\n                    f\"{tick}{keyword}{tick}:\\\\s*{tick}[^{tick}]+{tick}\",\n                    f\"{tick}{keyword}{tick}: {tick}XXXXXXXXX{tick}\",\n                    data,\n                )\n        return data\n\n    def get_base_url(self) -&gt; str:\n        \"\"\"Get base url for the API.\"\"\"\n        return self._base_url\n\n    def set_base_url(self, value: str) -&gt; None:\n        \"\"\"Set a custom base url for the API.\"\"\"\n        self._base_url = value\n        _LOGGER.debug(\"Set endpoint URL to %s\", self._base_url)\n\n    def get_timeout(self) -&gt; int:\n        \"\"\"Get timeout for the API.\"\"\"\n        return self._timeout\n\n    def set_timeout(self, value: int) -&gt; None:\n        \"\"\"Set a custom timeout.\"\"\"\n        self._timeout = value\n        _LOGGER.debug(\"Set timeout to %s\", self._base_url)\n\n    def set_session(self, value: ClientSession) -&gt; None:\n        \"\"\"Set an aiohttp client session.\"\"\"\n        self._session = value\n\n    def get_session(self) -&gt; ClientSession:\n        \"\"\"Return the aiohttp client session.\"\"\"\n        return self._session\n\n    def set_log_http_requests(self, value: bool) -&gt; None:\n        \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\"\n        self._log_http_requests_enabled = value\n\n    def set_redact_log_messages(self, value: bool) -&gt; None:\n        \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\"\n        self._redact_log_message_enabled = value\n\n    async def async_connect(self) -&gt; bool:\n        \"\"\"Authenticate against the API and retrieve an access token.\"\"\"\n        # check if we already have an access token and if so assume already authenticated\n        if self.is_connected():\n            return True\n        # call the access token endpoint\n        _LOGGER.debug(\"Connecting\")\n        data = await self._async_call_api(\"accessToken\", {}, True)\n        if \"accessToken\" not in data or \"expireTime\" not in data:\n            raise InvalidResponse(f\"accessToken not found in {data}\")\n        # store the access token\n        self._access_token = data[\"accessToken\"]\n        self._access_token_expire_time = data[\"expireTime\"]\n        _LOGGER.debug(\"Retrieved access token\")\n        self._connected = True\n        return True\n\n    async def async_disconnect(self) -&gt; bool:\n        \"\"\"Disconnect from the API.\"\"\"\n        self._access_token = None\n        self._access_token_expire_time = None\n        self._connected = False\n        _LOGGER.debug(\"Disconnected\")\n        return True\n\n    async def async_reconnect(self) -&gt; bool:\n        \"\"\"Reconnect to the API.\"\"\"\n        await self.async_disconnect()\n        return await self.async_connect()\n\n    def is_connected(self) -&gt; bool:\n        \"\"\"Return true if already connected.\"\"\"\n        return self._connected\n\n    async def _async_call_api(self, api: str, payload: dict, is_connect_request: bool = False) -&gt; dict:  # noqa: C901\n        \"\"\"Submit request to the HTTP API endpoint.\"\"\"\n        # connect if not connected\n        if not is_connect_request:\n            while not self.is_connected():\n                _LOGGER.debug(\"Connection attempt %d/%d\", self._retries, MAX_RETRIES)\n                # if noo many attempts, give up\n                if self._retries &gt;= MAX_RETRIES:\n                    _LOGGER.error(\"Too many unsuccesful connection attempts\")\n                    break\n                try:\n                    await self.async_connect()\n                except ImouException as exception:\n                    _LOGGER.error(exception.to_string())\n                self._retries = self._retries + 1\n            if not self.is_connected():\n                raise NotConnected()\n\n        # calculate timestamp, nonce, sign and id as per https://open.imoulife.com/book/http/develop.html\n        timestamp = round(time.time())\n        nonce = secrets.token_urlsafe()\n        sign = hashlib.md5(f\"time:{timestamp},nonce:{nonce},appSecret:{self._app_secret}\".encode(\"utf-8\")).hexdigest()\n        request_id = str(random.randint(1, 10000))\n\n        # add the access token to the payload if already available\n        if self._access_token is not None:\n            payload[\"token\"] = self._access_token\n\n        # prepare the API request\n        url = f\"{self._base_url}/{api}\"\n        body = {\n            \"system\": {\n                \"ver\": \"1.0\",\n                \"sign\": sign,\n                \"appId\": self._app_id,\n                \"time\": timestamp,\n                \"nonce\": nonce,\n            },\n            \"params\": payload,\n            \"id\": request_id,\n        }\n        if self._log_http_requests_enabled:\n            _LOGGER.debug(\"[HTTP_REQUEST] %s: %s\", url, self._redact_log_message(str(body)))\n\n        # send the request to the API endpoint\n        try:\n            response = await self._session.request(\"POST\", url, json=body, timeout=self._timeout)\n        except Exception as exception:\n            raise ConnectionFailed(f\"{exception}\") from exception\n\n        # parse the response and look for errors\n        response_status = response.status\n        if self._log_http_requests_enabled:\n            _LOGGER.debug(\n                \"[HTTP_RESPONSE] %s: %s\",\n                response_status,\n                self._redact_log_message(str(await response.text())),\n            )\n        if response_status != 200:\n            raise APIError(f\"status code {response.status}\")\n        try:\n            response_body = json.loads(await response.text())\n        except Exception as exception:\n            raise InvalidResponse(f\"unable to parse response text {await response.text()}\") from exception\n        if (\n            \"result\" not in response_body\n            or \"code\" not in response_body[\"result\"]\n            or \"msg\" not in response_body[\"result\"]\n        ):\n            raise InvalidResponse(f\"cannot find result, code or msg in {response_body}\")\n        result_code = response_body[\"result\"][\"code\"]\n        result_message = response_body[\"result\"][\"msg\"]\n        if result_code != \"0\":\n            error_message = result_code + \": \" + result_message\n            if result_code in (\"OP1008\", \"SN1001\"):\n                raise InvalidConfiguration(f\"Invalid appId or appSecret ({error_message})\")\n            if result_code == \"OP1009\":\n                raise NotAuthorized(f\"{error_message}\")\n            # if the access token is invalid or expired, reconnect\n            if result_code == \"TK1002\":\n                await self.async_reconnect()\n                response_data = await self._async_call_api(api, payload, is_connect_request)\n                return response_data\n            raise APIError(error_message)\n\n        # return the payload of the reponse\n        response_data = response_body[\"result\"][\"data\"] if \"data\" in response_body[\"result\"] else {}\n        return response_data\n\n    async def async_api_deviceBaseList(self) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Return the list of registered devices \\\n            (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceBaseList\"\n        # prepare the payload\n        payload = {\n            \"bindId\": -1,\n            \"limit\": 50,\n            \"type\": \"bindAndShare\",\n            \"needApInfo\": True,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_deviceOpenList(self) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Return the list of registered devices (Open) \\\n            (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceOpenList\"\n        # prepare the payload\n        payload = {\n            \"bindId\": -1,\n            \"limit\": 50,\n            \"type\": \"bindAndShare\",\n            \"needApInfo\": True,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_deviceBaseDetailList(self, devices: List[str]) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Return the details of the requested devices \\\n            (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceBaseDetailList\"\n        # prepare the payload\n        device_list = []\n        for device in devices:\n            device_list.append(\n                {\n                    \"deviceId\": device,\n                    \"channelList\": \"0\",\n                }\n            )\n        payload = {\"deviceList\": device_list}\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_deviceOpenDetailList(self, devices: List[str]) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Return the details of the requested devices (Open) \\\n            (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceOpenDetailList\"\n        # prepare the payload\n        device_list = []\n        for device in devices:\n            device_list.append(\n                {\n                    \"deviceId\": device,\n                    \"channelList\": \"0\",\n                }\n            )\n        payload = {\"deviceList\": device_list}\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_listDeviceAbility(self, devices: List[str]) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Ability to obtain multiple devices, channels, and accessories in batches \\\n            (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).\"\"\"\n        # define the api endpoint\n        api = \"listDeviceAbility\"\n        # prepare the payload\n        device_list = []\n        for device in devices:\n            device_list.append(\n                {\n                    \"deviceId\": device,\n                    \"channelList\": \"0\",\n                }\n            )\n        payload = {\"deviceList\": device_list}\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_deviceOnline(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Device online or offline \\\n            (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceOnline\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_deviceStorage(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Obtain device storage medium capacity information. \\\n            (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceStorage\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_getDeviceCameraStatus(  # pylint: disable=invalid-name\n        self, device_id: str, enable_type: str\n    ) -&gt; dict:\n        \"\"\"Get the status of the device switch \\\n            (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\"\n        # define the api endpoint\n        api = \"getDeviceCameraStatus\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"enableType\": enable_type,\n            \"channelId\": \"0\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_setDeviceCameraStatus(  # pylint: disable=invalid-name\n        self, device_id: str, enable_type: str, value: bool\n    ) -&gt; dict:\n        \"\"\"Set a device switch \\\n            (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\"\n        # define the api endpoint\n        api = \"setDeviceCameraStatus\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"enableType\": enable_type,\n            \"enable\": value,\n            \"channelId\": \"0\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_getAlarmMessage(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Get the device message list of the device channel in the specified time period \\\n            (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\"\n        # define the api endpoint\n        api = \"getAlarmMessage\"\n        # prepare the payload\n        now_time = datetime.now()\n        begin_time = now_time - timedelta(days=30)\n        end_time = now_time + timedelta(days=1)\n        payload = {\n            \"deviceId\": device_id,\n            \"count\": \"10\",\n            \"channelId\": \"0\",\n            \"beginTime\": begin_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n            \"endTime\": end_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_getNightVisionMode(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Query the night vision mode configuration of the device \\\n            (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).\"\"\"\n        # define the api endpoint\n        api = \"getNightVisionMode\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_setNightVisionMode(self, device_id: str, mode: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Set the night vision mode of the device \\\n            (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).\"\"\"\n        # define the api endpoint\n        api = \"setNightVisionMode\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n            \"mode\": mode,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_getMessageCallback(self) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Get the message callback address information currently set \\\n            (https://open.imoulife.com/book/http/push/getMessageCallback.html).\"\"\"\n        # define the api endpoint\n        api = \"getMessageCallback\"\n        # prepare the payload\n        payload: dict = {}\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_setMessageCallbackOn(self, callback_url: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Set the message callback address. \\\n            (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\"\n        # define the api endpoint\n        api = \"setMessageCallback\"\n        # prepare the payload\n        payload = {\n            \"callbackFlag\": \"alarm,deviceStatus\",\n            # \"basePush\": \"2\",\n            \"callbackUrl\": callback_url,\n            \"status\": \"on\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_setMessageCallbackOff(self) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Unset the message callback address. \\\n            (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\"\n        # define the api endpoint\n        api = \"setMessageCallback\"\n        # prepare the payload\n        payload = {\n            \"status\": \"off\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_restartDevice(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Restart the device. \\\n            (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).\"\"\"\n        # define the api endpoint\n        api = \"restartDevice\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_deviceSdcardStatus(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Get the SD card status of the device. \\\n            (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).\"\"\"\n        # define the api endpoint\n        api = \"deviceSdcardStatus\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_devicePTZInfo(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Get the current PTZ position information of the device. \\\n            (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).\"\"\"\n        # define the api endpoint\n        api = \"devicePTZInfo\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_controlLocationPTZ(  # pylint: disable=invalid-name\n        self, device_id: str, h: float, v: float, z: float\n    ) -&gt; dict:\n        \"\"\"PTZ positioning interface. \\\n            (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).\"\"\"\n        # define the api endpoint\n        api = \"controlLocationPTZ\"\n        # prepare the payload\n        try:\n            h = float(h)\n            v = float(v)\n            z = float(z)\n        except Exception as exception:\n            raise APIError(f\"cannot convert to float h:{h}, v:{v}, z:{z}\") from exception\n        if (h &lt; -1 or h &gt; 1) or (v &lt; -1 or v &gt; 1):\n            raise APIError(f\"h and v must be [-1;1]: h:{h}, v:{v}\")\n        if z &lt; 0 or z &gt; 1:\n            raise APIError(f\"z must be [0;1]: z: {z}\")\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n            \"h\": h,\n            \"v\": v,\n            \"z\": z,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_controlMovePTZ(  # pylint: disable=invalid-name\n        self, device_id: str, operation: str, duration: int\n    ) -&gt; dict:\n        \"\"\"PTZ movement control interface. \\\n            (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).\"\"\"\n        # define the api endpoint\n        api = \"controlMovePTZ\"\n        # prepare the payload\n        operation = operation.upper()\n        if operation not in PTZ_OPERATIONS:\n            raise APIError(f\"operation must one of {PTZ_OPERATIONS.keys()}\")\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n            \"operation\": str(PTZ_OPERATIONS[operation]),\n            \"duration\": str(duration),\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_setDeviceSnapEnhanced(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Capture pictures, supports the capture frequency of 1 time per second. \\\n            (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).\"\"\"\n        # define the api endpoint\n        api = \"setDeviceSnapEnhanced\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_bindDeviceLive(self, device_id: str, profile: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Create device source live broadcast address for profile (HD or SD). \\\n            (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).\"\"\"\n        # define the api endpoint\n        api = \"bindDeviceLive\"\n        # prepare the payload\n        profile = profile.upper()\n        stream_id = 0\n        if profile == \"HD\":\n            stream_id = 0\n        elif profile == \"SD\":\n            stream_id = 1\n        else:\n            raise APIError(\"profile must one of HD, SD\")\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n            # streamId, 0: HD main stream; 1: SD auxiliary stream\n            \"streamId\": stream_id,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_getLiveStreamInfo(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Obtain the live broadcast address. \\\n            (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).\"\"\"\n        # define the api endpoint\n        api = \"getLiveStreamInfo\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n            \"channelId\": \"0\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_liveList(self) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Get the live broadcast details list created under the developer's current account. \\\n            https://open.imoulife.com/book/en/http/device/live/liveList.html).\"\"\"\n        # define the api endpoint\n        api = \"liveList\"\n        # prepare the payload\n        payload = {\n            \"queryRange\": \"1-20\",\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_unbindLive(self, live_token: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Delete the live broadcast address. \\\n            (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).\"\"\"\n        # define the api endpoint\n        api = \"unbindLive\"\n        # prepare the payload\n        payload = {\"liveToken\": live_token}\n        # call the api\n        return await self._async_call_api(api, payload)\n\n    async def async_api_getDevicePowerInfo(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n        \"\"\"Obtain battery power information. \\\n            (https://open.imoulife.com/book/en/http/door/getDevicePowerInfo.html).\"\"\"\n        # define the api endpoint\n        api = \"getDevicePowerInfo\"\n        # prepare the payload\n        payload = {\n            \"deviceId\": device_id,\n        }\n        # call the api\n        return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.__init__","title":"<code>__init__(app_id, app_secret, session)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>app_id</code> <code>str</code> <p>appID from https://open.imoulife.com/consoleNew/myApp/appInfo</p> required <code>app_secret</code> <code>str</code> <p>appID from https://open.imoulife.com/consoleNew/myApp/appInfo</p> required <code>session</code> <code>ClientSession</code> <p>aiohttp client session</p> required Source code in <code>imouapi/api.py</code> <pre><code>def __init__(self, app_id: str, app_secret: str, session: ClientSession) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        app_id: appID from https://open.imoulife.com/consoleNew/myApp/appInfo\n        app_secret: appID from https://open.imoulife.com/consoleNew/myApp/appInfo\n        session: aiohttp client session\n    \"\"\"\n    self._app_id = app_id\n    self._app_secret = app_secret\n    self._session = session\n\n    self._base_url = API_URL\n    self._timeout = DEFAULT_TIMEOUT\n    self._log_http_requests_enabled = False\n    self._redact_log_message_enabled = True\n\n    self._access_token = None\n    self._access_token_expire_time = None\n    self._connected = False\n    self._retries = 1\n    _LOGGER.debug(\"Initialized. Endpoint URL: %s\", self._base_url)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_bindDeviceLive","title":"<code>async_api_bindDeviceLive(device_id, profile)</code>  <code>async</code>","text":"<p>Create device source live broadcast address for profile (HD or SD).             (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_bindDeviceLive(self, device_id: str, profile: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Create device source live broadcast address for profile (HD or SD). \\\n        (https://open.imoulife.com/book/en/http/device/live/bindDeviceLive.html).\"\"\"\n    # define the api endpoint\n    api = \"bindDeviceLive\"\n    # prepare the payload\n    profile = profile.upper()\n    stream_id = 0\n    if profile == \"HD\":\n        stream_id = 0\n    elif profile == \"SD\":\n        stream_id = 1\n    else:\n        raise APIError(\"profile must one of HD, SD\")\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n        # streamId, 0: HD main stream; 1: SD auxiliary stream\n        \"streamId\": stream_id,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_controlLocationPTZ","title":"<code>async_api_controlLocationPTZ(device_id, h, v, z)</code>  <code>async</code>","text":"<p>PTZ positioning interface.             (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_controlLocationPTZ(  # pylint: disable=invalid-name\n    self, device_id: str, h: float, v: float, z: float\n) -&gt; dict:\n    \"\"\"PTZ positioning interface. \\\n        (https://open.imoulife.com/book/en/http/device/operate/controlLocationPTZ.html).\"\"\"\n    # define the api endpoint\n    api = \"controlLocationPTZ\"\n    # prepare the payload\n    try:\n        h = float(h)\n        v = float(v)\n        z = float(z)\n    except Exception as exception:\n        raise APIError(f\"cannot convert to float h:{h}, v:{v}, z:{z}\") from exception\n    if (h &lt; -1 or h &gt; 1) or (v &lt; -1 or v &gt; 1):\n        raise APIError(f\"h and v must be [-1;1]: h:{h}, v:{v}\")\n    if z &lt; 0 or z &gt; 1:\n        raise APIError(f\"z must be [0;1]: z: {z}\")\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n        \"h\": h,\n        \"v\": v,\n        \"z\": z,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_controlMovePTZ","title":"<code>async_api_controlMovePTZ(device_id, operation, duration)</code>  <code>async</code>","text":"<p>PTZ movement control interface.             (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_controlMovePTZ(  # pylint: disable=invalid-name\n    self, device_id: str, operation: str, duration: int\n) -&gt; dict:\n    \"\"\"PTZ movement control interface. \\\n        (https://open.imoulife.com/book/en/http/device/operate/controlMovePTZ.html).\"\"\"\n    # define the api endpoint\n    api = \"controlMovePTZ\"\n    # prepare the payload\n    operation = operation.upper()\n    if operation not in PTZ_OPERATIONS:\n        raise APIError(f\"operation must one of {PTZ_OPERATIONS.keys()}\")\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n        \"operation\": str(PTZ_OPERATIONS[operation]),\n        \"duration\": str(duration),\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceBaseDetailList","title":"<code>async_api_deviceBaseDetailList(devices)</code>  <code>async</code>","text":"<p>Return the details of the requested devices             (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceBaseDetailList(self, devices: List[str]) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Return the details of the requested devices \\\n        (https://open.imoulife.com/book/http/device/manage/query/deviceBaseDetailList.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceBaseDetailList\"\n    # prepare the payload\n    device_list = []\n    for device in devices:\n        device_list.append(\n            {\n                \"deviceId\": device,\n                \"channelList\": \"0\",\n            }\n        )\n    payload = {\"deviceList\": device_list}\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceBaseList","title":"<code>async_api_deviceBaseList()</code>  <code>async</code>","text":"<p>Return the list of registered devices             (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceBaseList(self) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Return the list of registered devices \\\n        (https://open.imoulife.com/book/http/device/manage/query/deviceBaseList.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceBaseList\"\n    # prepare the payload\n    payload = {\n        \"bindId\": -1,\n        \"limit\": 50,\n        \"type\": \"bindAndShare\",\n        \"needApInfo\": True,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOnline","title":"<code>async_api_deviceOnline(device_id)</code>  <code>async</code>","text":"<p>Device online or offline             (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceOnline(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Device online or offline \\\n        (https://open.imoulife.com/book/http/device/manage/query/deviceOnline.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceOnline\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOpenDetailList","title":"<code>async_api_deviceOpenDetailList(devices)</code>  <code>async</code>","text":"<p>Return the details of the requested devices (Open)             (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceOpenDetailList(self, devices: List[str]) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Return the details of the requested devices (Open) \\\n        (https://open.imoulife.com/book/http/device/manage/query/deviceOpenDetailList.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceOpenDetailList\"\n    # prepare the payload\n    device_list = []\n    for device in devices:\n        device_list.append(\n            {\n                \"deviceId\": device,\n                \"channelList\": \"0\",\n            }\n        )\n    payload = {\"deviceList\": device_list}\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceOpenList","title":"<code>async_api_deviceOpenList()</code>  <code>async</code>","text":"<p>Return the list of registered devices (Open)             (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceOpenList(self) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Return the list of registered devices (Open) \\\n        (https://open.imoulife.com/book/http/device/manage/query/deviceOpenList.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceOpenList\"\n    # prepare the payload\n    payload = {\n        \"bindId\": -1,\n        \"limit\": 50,\n        \"type\": \"bindAndShare\",\n        \"needApInfo\": True,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_devicePTZInfo","title":"<code>async_api_devicePTZInfo(device_id)</code>  <code>async</code>","text":"<p>Get the current PTZ position information of the device.             (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_devicePTZInfo(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Get the current PTZ position information of the device. \\\n        (https://open.imoulife.com/book/en/http/device/operate/devicePTZInfo.html).\"\"\"\n    # define the api endpoint\n    api = \"devicePTZInfo\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceSdcardStatus","title":"<code>async_api_deviceSdcardStatus(device_id)</code>  <code>async</code>","text":"<p>Get the SD card status of the device.             (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceSdcardStatus(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Get the SD card status of the device. \\\n        (https://open.imoulife.com/book/en/http/device/config/storage/deviceSdcardStatus.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceSdcardStatus\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_deviceStorage","title":"<code>async_api_deviceStorage(device_id)</code>  <code>async</code>","text":"<p>Obtain device storage medium capacity information.             (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_deviceStorage(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Obtain device storage medium capacity information. \\\n        (https://open.imoulife.com/book/http/device/config/storage/deviceStorage.html).\"\"\"\n    # define the api endpoint\n    api = \"deviceStorage\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getAlarmMessage","title":"<code>async_api_getAlarmMessage(device_id)</code>  <code>async</code>","text":"<p>Get the device message list of the device channel in the specified time period             (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_getAlarmMessage(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Get the device message list of the device channel in the specified time period \\\n        (https://open.imoulife.com/book/http/device/alarm/getAlarmMessage.html).\"\"\"\n    # define the api endpoint\n    api = \"getAlarmMessage\"\n    # prepare the payload\n    now_time = datetime.now()\n    begin_time = now_time - timedelta(days=30)\n    end_time = now_time + timedelta(days=1)\n    payload = {\n        \"deviceId\": device_id,\n        \"count\": \"10\",\n        \"channelId\": \"0\",\n        \"beginTime\": begin_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n        \"endTime\": end_time.strftime(\"%Y-%m-%d %H:%M:%S\"),\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getDeviceCameraStatus","title":"<code>async_api_getDeviceCameraStatus(device_id, enable_type)</code>  <code>async</code>","text":"<p>Get the status of the device switch             (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_getDeviceCameraStatus(  # pylint: disable=invalid-name\n    self, device_id: str, enable_type: str\n) -&gt; dict:\n    \"\"\"Get the status of the device switch \\\n        (https://open.imoulife.com/book/http/device/config/ability/getDeviceCameraStatus.html).\"\"\"\n    # define the api endpoint\n    api = \"getDeviceCameraStatus\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"enableType\": enable_type,\n        \"channelId\": \"0\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getDevicePowerInfo","title":"<code>async_api_getDevicePowerInfo(device_id)</code>  <code>async</code>","text":"<p>Obtain battery power information.             (https://open.imoulife.com/book/en/http/door/getDevicePowerInfo.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_getDevicePowerInfo(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Obtain battery power information. \\\n        (https://open.imoulife.com/book/en/http/door/getDevicePowerInfo.html).\"\"\"\n    # define the api endpoint\n    api = \"getDevicePowerInfo\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getLiveStreamInfo","title":"<code>async_api_getLiveStreamInfo(device_id)</code>  <code>async</code>","text":"<p>Obtain the live broadcast address.             (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_getLiveStreamInfo(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Obtain the live broadcast address. \\\n        (https://open.imoulife.com/book/en/http/device/live/getLiveStreamInfo.html).\"\"\"\n    # define the api endpoint\n    api = \"getLiveStreamInfo\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getMessageCallback","title":"<code>async_api_getMessageCallback()</code>  <code>async</code>","text":"<p>Get the message callback address information currently set             (https://open.imoulife.com/book/http/push/getMessageCallback.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_getMessageCallback(self) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Get the message callback address information currently set \\\n        (https://open.imoulife.com/book/http/push/getMessageCallback.html).\"\"\"\n    # define the api endpoint\n    api = \"getMessageCallback\"\n    # prepare the payload\n    payload: dict = {}\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_getNightVisionMode","title":"<code>async_api_getNightVisionMode(device_id)</code>  <code>async</code>","text":"<p>Query the night vision mode configuration of the device             (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_getNightVisionMode(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Query the night vision mode configuration of the device \\\n        (https://open.imoulife.com/book/http/device/config/video/getNightVisionMode.html).\"\"\"\n    # define the api endpoint\n    api = \"getNightVisionMode\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_listDeviceAbility","title":"<code>async_api_listDeviceAbility(devices)</code>  <code>async</code>","text":"<p>Ability to obtain multiple devices, channels, and accessories in batches             (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_listDeviceAbility(self, devices: List[str]) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Ability to obtain multiple devices, channels, and accessories in batches \\\n        (https://open.imoulife.com/book/http/device/manage/query/listDeviceAbility.html).\"\"\"\n    # define the api endpoint\n    api = \"listDeviceAbility\"\n    # prepare the payload\n    device_list = []\n    for device in devices:\n        device_list.append(\n            {\n                \"deviceId\": device,\n                \"channelList\": \"0\",\n            }\n        )\n    payload = {\"deviceList\": device_list}\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_liveList","title":"<code>async_api_liveList()</code>  <code>async</code>","text":"<p>Get the live broadcast details list created under the developer's current account.             https://open.imoulife.com/book/en/http/device/live/liveList.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_liveList(self) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Get the live broadcast details list created under the developer's current account. \\\n        https://open.imoulife.com/book/en/http/device/live/liveList.html).\"\"\"\n    # define the api endpoint\n    api = \"liveList\"\n    # prepare the payload\n    payload = {\n        \"queryRange\": \"1-20\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_restartDevice","title":"<code>async_api_restartDevice(device_id)</code>  <code>async</code>","text":"<p>Restart the device.             (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_restartDevice(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Restart the device. \\\n        (https://open.imoulife.com/book/en/http/device/operate/restartDevice.html).\"\"\"\n    # define the api endpoint\n    api = \"restartDevice\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setDeviceCameraStatus","title":"<code>async_api_setDeviceCameraStatus(device_id, enable_type, value)</code>  <code>async</code>","text":"<p>Set a device switch             (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_setDeviceCameraStatus(  # pylint: disable=invalid-name\n    self, device_id: str, enable_type: str, value: bool\n) -&gt; dict:\n    \"\"\"Set a device switch \\\n        (https://open.imoulife.com/book/http/device/config/ability/setDeviceCameraStatus.html).\"\"\"\n    # define the api endpoint\n    api = \"setDeviceCameraStatus\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"enableType\": enable_type,\n        \"enable\": value,\n        \"channelId\": \"0\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setDeviceSnapEnhanced","title":"<code>async_api_setDeviceSnapEnhanced(device_id)</code>  <code>async</code>","text":"<p>Capture pictures, supports the capture frequency of 1 time per second.             (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_setDeviceSnapEnhanced(self, device_id: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Capture pictures, supports the capture frequency of 1 time per second. \\\n        (https://open.imoulife.com/book/en/http/device/operate/setDeviceSnapEnhanced.html).\"\"\"\n    # define the api endpoint\n    api = \"setDeviceSnapEnhanced\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setMessageCallbackOff","title":"<code>async_api_setMessageCallbackOff()</code>  <code>async</code>","text":"<p>Unset the message callback address.             (https://open.imoulife.com/book/http/push/setMessageCallback.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_setMessageCallbackOff(self) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Unset the message callback address. \\\n        (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\"\n    # define the api endpoint\n    api = \"setMessageCallback\"\n    # prepare the payload\n    payload = {\n        \"status\": \"off\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setMessageCallbackOn","title":"<code>async_api_setMessageCallbackOn(callback_url)</code>  <code>async</code>","text":"<p>Set the message callback address.             (https://open.imoulife.com/book/http/push/setMessageCallback.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_setMessageCallbackOn(self, callback_url: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Set the message callback address. \\\n        (https://open.imoulife.com/book/http/push/setMessageCallback.html).\"\"\"\n    # define the api endpoint\n    api = \"setMessageCallback\"\n    # prepare the payload\n    payload = {\n        \"callbackFlag\": \"alarm,deviceStatus\",\n        # \"basePush\": \"2\",\n        \"callbackUrl\": callback_url,\n        \"status\": \"on\",\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_setNightVisionMode","title":"<code>async_api_setNightVisionMode(device_id, mode)</code>  <code>async</code>","text":"<p>Set the night vision mode of the device             (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_setNightVisionMode(self, device_id: str, mode: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Set the night vision mode of the device \\\n        (https://open.imoulife.com/book/http/device/config/video/setNightVisionMode.html).\"\"\"\n    # define the api endpoint\n    api = \"setNightVisionMode\"\n    # prepare the payload\n    payload = {\n        \"deviceId\": device_id,\n        \"channelId\": \"0\",\n        \"mode\": mode,\n    }\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_api_unbindLive","title":"<code>async_api_unbindLive(live_token)</code>  <code>async</code>","text":"<p>Delete the live broadcast address.             (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_api_unbindLive(self, live_token: str) -&gt; dict:  # pylint: disable=invalid-name\n    \"\"\"Delete the live broadcast address. \\\n        (https://open.imoulife.com/book/en/http/device/live/unbindLive.html).\"\"\"\n    # define the api endpoint\n    api = \"unbindLive\"\n    # prepare the payload\n    payload = {\"liveToken\": live_token}\n    # call the api\n    return await self._async_call_api(api, payload)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_connect","title":"<code>async_connect()</code>  <code>async</code>","text":"<p>Authenticate against the API and retrieve an access token.</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_connect(self) -&gt; bool:\n    \"\"\"Authenticate against the API and retrieve an access token.\"\"\"\n    # check if we already have an access token and if so assume already authenticated\n    if self.is_connected():\n        return True\n    # call the access token endpoint\n    _LOGGER.debug(\"Connecting\")\n    data = await self._async_call_api(\"accessToken\", {}, True)\n    if \"accessToken\" not in data or \"expireTime\" not in data:\n        raise InvalidResponse(f\"accessToken not found in {data}\")\n    # store the access token\n    self._access_token = data[\"accessToken\"]\n    self._access_token_expire_time = data[\"expireTime\"]\n    _LOGGER.debug(\"Retrieved access token\")\n    self._connected = True\n    return True\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_disconnect","title":"<code>async_disconnect()</code>  <code>async</code>","text":"<p>Disconnect from the API.</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_disconnect(self) -&gt; bool:\n    \"\"\"Disconnect from the API.\"\"\"\n    self._access_token = None\n    self._access_token_expire_time = None\n    self._connected = False\n    _LOGGER.debug(\"Disconnected\")\n    return True\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.async_reconnect","title":"<code>async_reconnect()</code>  <code>async</code>","text":"<p>Reconnect to the API.</p> Source code in <code>imouapi/api.py</code> <pre><code>async def async_reconnect(self) -&gt; bool:\n    \"\"\"Reconnect to the API.\"\"\"\n    await self.async_disconnect()\n    return await self.async_connect()\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.get_base_url","title":"<code>get_base_url()</code>","text":"<p>Get base url for the API.</p> Source code in <code>imouapi/api.py</code> <pre><code>def get_base_url(self) -&gt; str:\n    \"\"\"Get base url for the API.\"\"\"\n    return self._base_url\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.get_session","title":"<code>get_session()</code>","text":"<p>Return the aiohttp client session.</p> Source code in <code>imouapi/api.py</code> <pre><code>def get_session(self) -&gt; ClientSession:\n    \"\"\"Return the aiohttp client session.\"\"\"\n    return self._session\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.get_timeout","title":"<code>get_timeout()</code>","text":"<p>Get timeout for the API.</p> Source code in <code>imouapi/api.py</code> <pre><code>def get_timeout(self) -&gt; int:\n    \"\"\"Get timeout for the API.\"\"\"\n    return self._timeout\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.is_connected","title":"<code>is_connected()</code>","text":"<p>Return true if already connected.</p> Source code in <code>imouapi/api.py</code> <pre><code>def is_connected(self) -&gt; bool:\n    \"\"\"Return true if already connected.\"\"\"\n    return self._connected\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_base_url","title":"<code>set_base_url(value)</code>","text":"<p>Set a custom base url for the API.</p> Source code in <code>imouapi/api.py</code> <pre><code>def set_base_url(self, value: str) -&gt; None:\n    \"\"\"Set a custom base url for the API.\"\"\"\n    self._base_url = value\n    _LOGGER.debug(\"Set endpoint URL to %s\", self._base_url)\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_log_http_requests","title":"<code>set_log_http_requests(value)</code>","text":"<p>Set to true if you want in debug logs also HTTP requests and responses.</p> Source code in <code>imouapi/api.py</code> <pre><code>def set_log_http_requests(self, value: bool) -&gt; None:\n    \"\"\"Set to true if you want in debug logs also HTTP requests and responses.\"\"\"\n    self._log_http_requests_enabled = value\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_redact_log_messages","title":"<code>set_redact_log_messages(value)</code>","text":"<p>Set to true if you want debug logs redacted from sensitive data.</p> Source code in <code>imouapi/api.py</code> <pre><code>def set_redact_log_messages(self, value: bool) -&gt; None:\n    \"\"\"Set to true if you want debug logs redacted from sensitive data.\"\"\"\n    self._redact_log_message_enabled = value\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_session","title":"<code>set_session(value)</code>","text":"<p>Set an aiohttp client session.</p> Source code in <code>imouapi/api.py</code> <pre><code>def set_session(self, value: ClientSession) -&gt; None:\n    \"\"\"Set an aiohttp client session.\"\"\"\n    self._session = value\n</code></pre>"},{"location":"modules/api/#imouapi.api.ImouAPIClient.set_timeout","title":"<code>set_timeout(value)</code>","text":"<p>Set a custom timeout.</p> Source code in <code>imouapi/api.py</code> <pre><code>def set_timeout(self, value: int) -&gt; None:\n    \"\"\"Set a custom timeout.\"\"\"\n    self._timeout = value\n    _LOGGER.debug(\"Set timeout to %s\", self._base_url)\n</code></pre>"},{"location":"modules/device/","title":"device","text":"<p>High level API to discover and interacting with Imou devices and their sensors.</p>"},{"location":"modules/device/#imouapi.device.ImouDevice","title":"<code>ImouDevice</code>","text":"<p>A representation of an IMOU Device.</p> Source code in <code>imouapi/device.py</code> <pre><code>class ImouDevice:\n    \"\"\"A representation of an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an ImouAPIClient instance\n            device_id: device id\n        \"\"\"\n        self._api_client = api_client\n        self._device_id = device_id\n\n        self._catalog = \"N.A.\"\n        self._firmware = \"N.A.\"\n        self._name = \"N.A.\"\n        self._given_name = \"\"\n        self._device_model = \"N.A.\"\n        self._manufacturer = \"Imou\"\n        self._status = \"UNKNOWN\"\n        self._capabilities: List[str] = []\n        self._switches: List[str] = []\n        self._sensor_instances: Dict[str, list] = {\n            \"switch\": [],\n            \"sensor\": [],\n            \"binary_sensor\": [],\n            \"select\": [],\n            \"button\": [],\n            \"siren\": [],\n            \"camera\": [],\n        }\n        self._initialized = False\n        self._enabled = True\n        self._sleepable = False\n        self._wait_after_wakeup = WAIT_AFTER_WAKE_UP\n        self._camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD\n\n    def get_device_id(self) -&gt; str:\n        \"\"\"Get device id.\"\"\"\n        return self._device_id\n\n    def get_api_client(self) -&gt; ImouAPIClient:\n        \"\"\"Get api client.\"\"\"\n        return self._api_client\n\n    def get_name(self) -&gt; str:\n        \"\"\"Get device name.\"\"\"\n        if self._given_name != \"\":\n            return self._given_name\n        return self._name\n\n    def set_name(self, given_name: str) -&gt; None:\n        \"\"\"Set device name.\"\"\"\n        self._given_name = given_name\n\n    def get_model(self) -&gt; str:\n        \"\"\"Get model.\"\"\"\n        return self._device_model\n\n    def get_manufacturer(self) -&gt; str:\n        \"\"\"Get manufacturer.\"\"\"\n        return self._manufacturer\n\n    def get_firmware(self) -&gt; str:\n        \"\"\"Get firmware.\"\"\"\n        return self._firmware\n\n    def get_status(self) -&gt; str:\n        \"\"\"Get status.\"\"\"\n        return self._status\n\n    def is_online(self) -&gt; bool:\n        \"\"\"Get online status.\"\"\"\n        return ONLINE_STATUS[self._status] == \"Online\" or ONLINE_STATUS[self._status] == \"Dormant\"\n\n    def get_sleepable(self) -&gt; bool:\n        \"\"\"Get sleepable.\"\"\"\n        return self._sleepable\n\n    def get_all_sensors(self) -&gt; List[ImouEntity]:\n        \"\"\"Get all the sensor instances.\"\"\"\n        sensors = []\n        for (\n            platform,  # pylint: disable=unused-variable\n            sensor_instances_array,\n        ) in self._sensor_instances.items():\n            for sensor_instance in sensor_instances_array:\n                sensors.append(sensor_instance)\n        return sensors\n\n    def get_sensors_by_platform(self, platform: str) -&gt; List[ImouEntity]:\n        \"\"\"Get sensor instances associated to a given platform.\"\"\"\n        if platform not in self._sensor_instances:\n            return []\n        return self._sensor_instances[platform]\n\n    def get_sensor_by_name(\n        self, name: str\n    ) -&gt; Union[ImouSensor, ImouBinarySensor, ImouSwitch, ImouSelect, ImouButton, None]:\n        \"\"\"Get sensor instance with a given name.\"\"\"\n        for (\n            platform,  # pylint: disable=unused-variable\n            sensor_instances_array,\n        ) in self._sensor_instances.items():\n            for sensor_instance in sensor_instances_array:\n                if sensor_instance.get_name() == name:\n                    return sensor_instance\n        return None\n\n    def set_enabled(self, value: bool) -&gt; None:\n        \"\"\"Set enable.\"\"\"\n        self._enabled = value\n\n    def is_enabled(self) -&gt; bool:\n        \"\"\"Is enabled.\"\"\"\n        return self._enabled\n\n    def set_wait_after_wakeup(self, value: float) -&gt; None:\n        \"\"\"Set wait after wakeup.\"\"\"\n        self._wait_after_wakeup = value\n\n    def get_wait_after_wakeup(self) -&gt; float:\n        \"\"\"Get wait after wakeup.\"\"\"\n        return self._wait_after_wakeup\n\n    def set_camera_wait_before_download(self, value: float) -&gt; None:\n        \"\"\"Set camera wait before download.\"\"\"\n        self._camera_wait_before_download = value\n\n    def get_camera_wait_before_download(self) -&gt; float:\n        \"\"\"Get camera wait before download.\"\"\"\n        return self._camera_wait_before_download\n\n    def _add_sensor_instance(self, platform, instance):\n        \"\"\"Add a sensor instance.\"\"\"\n        instance.set_device(self)\n        self._sensor_instances[platform].append(instance)\n\n    async def async_initialize(self) -&gt; None:\n        \"\"\"Initialize the instance by retrieving the device details and associated sensors.\"\"\"\n        # get the details for this device from the API\n        device_array = await self._api_client.async_api_deviceBaseDetailList([self._device_id])\n        if \"deviceList\" not in device_array or len(device_array[\"deviceList\"]) != 1:\n            raise InvalidResponse(f\"deviceList not found in {str(device_array)}\")\n        # reponse is an array, our data is in the first element\n        device_data = device_array[\"deviceList\"][0]\n        try:\n            # get device details\n            self._catalog = device_data[\"catalog\"]\n            self._firmware = device_data[\"version\"]\n            self._name = device_data[\"name\"]\n            self._device_model = device_data[\"deviceModel\"]\n            # get device capabilities\n            self._capabilities = device_data[\"ability\"].split(\",\")\n            # Add undocumented capabilities or capabilities inherited from other capabilities\n            self._capabilities.append(\"MotionDetect\")\n            if \"WLM\" in self._capabilities:\n                self._capabilities.append(\"Linkagewhitelight\")\n            if \"WLAN\" in self._capabilities:\n                self._capabilities.append(\"pushNotifications\")\n            switches_keys = IMOU_SWITCHES.keys()\n            # add switches. For each possible switch, check if there is a capability with the same name \\\n            # (ref. https://open.imoulife.com/book/en/faq/feature.html)\n            for switch_type in switches_keys:\n                for capability in self._capabilities:\n                    capability = capability.lower()\n                    capability = re.sub(\"v\\\\d$\", \"\", capability)\n                    if switch_type.lower() == capability and switch_type.lower() not in self._switches:\n                        self._switches.append(switch_type)\n                        # create an instance and save it\n                        self._add_sensor_instance(\n                            \"switch\",\n                            ImouSwitch(\n                                self._api_client,\n                                self._device_id,\n                                self.get_name(),\n                                switch_type,\n                            ),\n                        )\n                        break\n            # identify sleepable devices\n            if \"Dormant\" in self._capabilities:\n                self._sleepable = True\n                self._add_sensor_instance(\n                    \"sensor\",\n                    ImouSensor(\n                        self._api_client,\n                        self._device_id,\n                        self.get_name(),\n                        \"battery\",\n                    ),\n                )\n            # add storageUsed sensor\n            if \"LocalStorage\" in self._capabilities:\n                self._add_sensor_instance(\n                    \"sensor\",\n                    ImouSensor(\n                        self._api_client,\n                        self._device_id,\n                        self.get_name(),\n                        \"storageUsed\",\n                    ),\n                )\n            # add callbackUrl sensor\n            self._add_sensor_instance(\n                \"sensor\",\n                ImouSensor(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"callbackUrl\",\n                ),\n            )\n            # add status sensor\n            self._add_sensor_instance(\n                \"sensor\",\n                ImouSensor(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"status\",\n                ),\n            )\n            # add online binary sensor\n            if \"WLAN\" in self._capabilities:\n                self._add_sensor_instance(\n                    \"binary_sensor\",\n                    ImouBinarySensor(\n                        self._api_client,\n                        self._device_id,\n                        self.get_name(),\n                        \"online\",\n                    ),\n                )\n            # add motionAlarm binary sensor\n            if \"AlarmMD\" in self._capabilities:\n                self._add_sensor_instance(\n                    \"binary_sensor\",\n                    ImouBinarySensor(\n                        self._api_client,\n                        self._device_id,\n                        self.get_name(),\n                        \"motionAlarm\",\n                    ),\n                )\n            # add nightVisionMode select\n            if \"NVM\" in self._capabilities:\n                self._add_sensor_instance(\n                    \"select\",\n                    ImouSelect(\n                        self._api_client,\n                        self._device_id,\n                        self.get_name(),\n                        \"nightVisionMode\",\n                    ),\n                )\n            # add restartDevice button\n            self._add_sensor_instance(\n                \"button\",\n                ImouButton(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"restartDevice\",\n                ),\n            )\n            # add refreshData button\n            self._add_sensor_instance(\n                \"button\",\n                ImouButton(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"refreshData\",\n                ),\n            )\n            # add refreshAlarm button\n            self._add_sensor_instance(\n                \"button\",\n                ImouButton(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"refreshAlarm\",\n                ),\n            )\n            # add siren siren\n            if \"Siren\" in self._capabilities:\n                self._add_sensor_instance(\n                    \"siren\",\n                    ImouSiren(\n                        self._api_client,\n                        self._device_id,\n                        self.get_name(),\n                        \"siren\",\n                    ),\n                )\n            # add cameras\n            self._add_sensor_instance(\n                \"camera\",\n                ImouCamera(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"camera\",\n                    \"HD\",\n                ),\n            )\n            self._add_sensor_instance(\n                \"camera\",\n                ImouCamera(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"cameraSD\",\n                    \"SD\",\n                ),\n            )\n        except Exception as exception:\n            raise InvalidResponse(f\" missing parameter or error parsing in {device_data}\") from exception\n        _LOGGER.debug(\"Retrieved device %s\", self.to_string())\n        _LOGGER.debug(\"Device details:\\n%s\", self.dump())\n        # keep track that we have already asked for the device details\n        self._initialized = True\n\n    async def async_refresh_status(self) -&gt; None:\n        \"\"\"Refresh status attribute.\"\"\"\n        data = await self._api_client.async_api_deviceOnline(self._device_id)\n        if \"onLine\" not in data or data[\"onLine\"] not in ONLINE_STATUS:\n            raise InvalidResponse(f\"onLine not valid in {data}\")\n        self._status = data[\"onLine\"]\n\n    async def async_wakeup(self) -&gt; bool:\n        \"\"\"Wake up a dormant device.\"\"\"\n        # if this is a regular device, just return\n        if not self._sleepable:\n            return True\n        # if the device is already online, return\n        await self.async_refresh_status()\n        if ONLINE_STATUS[self._status] == \"Online\":\n            return True\n        # wake up the device\n        _LOGGER.debug(\"[%s] waking up the dormant device\", self.get_name())\n        await self._api_client.async_api_setDeviceCameraStatus(self._device_id, \"closeDormant\", True)\n        # wait for the device to be fully up\n        await asyncio.sleep(self._wait_after_wakeup)\n        # ensure the device is up\n        await self.async_refresh_status()\n        if ONLINE_STATUS[self._status] == \"Online\":\n            _LOGGER.debug(\"[%s] device is now online\", self.get_name())\n            return True\n        _LOGGER.warning(\"[%s] failed to wake up dormant device\", self.get_name())\n        return False\n\n    async def async_get_data(self) -&gt; bool:\n        \"\"\"Update device properties and its sensors.\"\"\"\n        if not self._enabled:\n            return False\n        if not self._initialized:\n            # get the details of the device first\n            await self.async_initialize()\n        _LOGGER.debug(\"[%s] update requested\", self.get_name())\n\n        # check if the device is online\n        await self.async_refresh_status()\n\n        # update the status of all the sensors (if the device is online)\n        if self.is_online():\n            for (\n                platform,  # pylint: disable=unused-variable\n                sensor_instances_array,\n            ) in self._sensor_instances.items():\n                for sensor_instance in sensor_instances_array:\n                    await sensor_instance.async_update()\n        return True\n\n    def to_string(self) -&gt; str:\n        \"\"\"Return the object as a string.\"\"\"\n        return f\"{self._name} ({self._device_model}, serial {self._device_id})\"\n\n    def get_diagnostics(self) -&gt; Dict[str, Any]:\n        \"\"\"Return diagnostics for the device.\"\"\"\n        # prepare capabilities\n        capabilities = []\n        for capability_name in self._capabilities:\n            capability = {}\n            description = (\n                f\"{IMOU_CAPABILITIES[capability_name]} ({capability_name})\"\n                if capability_name in IMOU_CAPABILITIES\n                else capability_name\n            )\n            capability[\"name\"] = capability_name\n            capability[\"description\"] = description\n            capabilities.append(capability)\n        # prepare switches\n        switches = []\n        for sensor_instance in self._sensor_instances[\"switch\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = (\n                f\"{IMOU_SWITCHES[sensor_name]} ({sensor_name})\" if sensor_name in IMOU_SWITCHES else sensor_name\n            )\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"state\"] = sensor_instance.is_on()\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            switches.append(sensor)\n        # prepare sensors\n        sensors = []\n        for sensor_instance in self._sensor_instances[\"sensor\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = f\"{SENSORS[sensor_name]} ({sensor_name})\"\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"state\"] = sensor_instance.get_state()\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            sensors.append(sensor)\n        # prepare binary sensors\n        binary_sensors = []\n        for sensor_instance in self._sensor_instances[\"binary_sensor\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = f\"{BINARY_SENSORS[sensor_name]} ({sensor_name})\"\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"state\"] = sensor_instance.is_on()\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            binary_sensors.append(sensor)\n        # prepare select\n        selects = []\n        for sensor_instance in self._sensor_instances[\"select\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = f\"{SELECT[sensor_name]} ({sensor_name})\"\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"current_option\"] = sensor_instance.get_current_option()\n            sensor[\"available_options\"] = sensor_instance.get_available_options()\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            selects.append(sensor)\n        # prepare button\n        buttons = []\n        for sensor_instance in self._sensor_instances[\"button\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = f\"{BUTTONS[sensor_name]} ({sensor_name})\"\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            buttons.append(sensor)\n        # prepare sirens\n        sirens = []\n        for sensor_instance in self._sensor_instances[\"siren\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = f\"{SIRENS[sensor_name]} ({sensor_name})\" if sensor_name in SIRENS else sensor_name\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"state\"] = sensor_instance.is_on()\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            sirens.append(sensor)\n        # prepare cameras\n        cameras = []\n        for sensor_instance in self._sensor_instances[\"camera\"]:\n            sensor = {}\n            sensor_name = sensor_instance.get_name()\n            description = f\"{CAMERAS[sensor_name]} ({sensor_name})\" if sensor_name in CAMERAS else sensor_name\n            sensor[\"name\"] = sensor_name\n            sensor[\"description\"] = description\n            sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n            sensor[\"is_updated\"] = sensor_instance.is_updated()\n            sensor[\"attributes\"] = sensor_instance.get_attributes()\n            cameras.append(sensor)\n        # prepare data structure to return\n        data: Dict[str, Any] = {\n            \"api\": {\n                \"base_url\": self._api_client.get_base_url(),\n                \"timeout\": self._api_client.get_timeout(),\n                \"is_connected\": self._api_client.is_connected(),\n            },\n            \"device\": {\n                \"device_id\": self._device_id,\n                \"name\": self._name,\n                \"catalog\": self._catalog,\n                \"given_name\": self._given_name,\n                \"model\": self._device_model,\n                \"firmware\": self._firmware,\n                \"manufacturer\": self._manufacturer,\n                \"status\": self._status,\n                \"sleepable\": self._sleepable,\n            },\n            \"capabilities\": capabilities,\n            \"switches\": switches,\n            \"sensors\": sensors,\n            \"binary_sensors\": binary_sensors,\n            \"selects\": selects,\n            \"buttons\": buttons,\n            \"sirens\": sirens,\n            \"cameras\": cameras,\n        }\n        return data\n\n    def dump(self) -&gt; str:\n        \"\"\"Return the full description of the object and its attributes.\"\"\"\n        data = self.get_diagnostics()\n        dump = (\n            f\"- Device ID: {data['device']['device_id']}\\n\"\n            + f\"    Name: {data['device']['name']}\\n\"\n            + f\"    Catalog: {data['device']['catalog']}\\n\"\n            + f\"    Model: {data['device']['model']}\\n\"\n            + f\"    Firmware: {data['device']['firmware']}\\n\"\n            + f\"    Status: {ONLINE_STATUS[data['device']['status']]}\\n\"\n            + f\"    Sleepable: {data['device']['sleepable']}\\n\"\n        )\n        dump = dump + \"    Capabilities: \\n\"\n        for capability in data[\"capabilities\"]:\n            dump = dump + f\"        - {capability['description']}\\n\"\n        dump = dump + \"    Switches: \\n\"\n        for sensor in data[\"switches\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        dump = dump + \"    Sensors: \\n\"\n        for sensor in data[\"sensors\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        dump = dump + \"    Binary Sensors: \\n\"\n        for sensor in data[\"binary_sensors\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        dump = dump + \"    Select: \\n\"\n        for sensor in data[\"selects\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']}: {sensor['current_option']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        dump = dump + \"    Buttons: \\n\"\n        for sensor in data[\"buttons\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        dump = dump + \"    Sirens: \\n\"\n        for sensor in data[\"sirens\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        dump = dump + \"    Cameras: \\n\"\n        for sensor in data[\"cameras\"]:\n            dump = (\n                dump\n                + f\"        - {sensor['description']}: {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n            )\n        return dump\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.__init__","title":"<code>__init__(api_client, device_id)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an ImouAPIClient instance</p> required <code>device_id</code> <code>str</code> <p>device id</p> required Source code in <code>imouapi/device.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an ImouAPIClient instance\n        device_id: device id\n    \"\"\"\n    self._api_client = api_client\n    self._device_id = device_id\n\n    self._catalog = \"N.A.\"\n    self._firmware = \"N.A.\"\n    self._name = \"N.A.\"\n    self._given_name = \"\"\n    self._device_model = \"N.A.\"\n    self._manufacturer = \"Imou\"\n    self._status = \"UNKNOWN\"\n    self._capabilities: List[str] = []\n    self._switches: List[str] = []\n    self._sensor_instances: Dict[str, list] = {\n        \"switch\": [],\n        \"sensor\": [],\n        \"binary_sensor\": [],\n        \"select\": [],\n        \"button\": [],\n        \"siren\": [],\n        \"camera\": [],\n    }\n    self._initialized = False\n    self._enabled = True\n    self._sleepable = False\n    self._wait_after_wakeup = WAIT_AFTER_WAKE_UP\n    self._camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.async_get_data","title":"<code>async_get_data()</code>  <code>async</code>","text":"<p>Update device properties and its sensors.</p> Source code in <code>imouapi/device.py</code> <pre><code>async def async_get_data(self) -&gt; bool:\n    \"\"\"Update device properties and its sensors.\"\"\"\n    if not self._enabled:\n        return False\n    if not self._initialized:\n        # get the details of the device first\n        await self.async_initialize()\n    _LOGGER.debug(\"[%s] update requested\", self.get_name())\n\n    # check if the device is online\n    await self.async_refresh_status()\n\n    # update the status of all the sensors (if the device is online)\n    if self.is_online():\n        for (\n            platform,  # pylint: disable=unused-variable\n            sensor_instances_array,\n        ) in self._sensor_instances.items():\n            for sensor_instance in sensor_instances_array:\n                await sensor_instance.async_update()\n    return True\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.async_initialize","title":"<code>async_initialize()</code>  <code>async</code>","text":"<p>Initialize the instance by retrieving the device details and associated sensors.</p> Source code in <code>imouapi/device.py</code> <pre><code>async def async_initialize(self) -&gt; None:\n    \"\"\"Initialize the instance by retrieving the device details and associated sensors.\"\"\"\n    # get the details for this device from the API\n    device_array = await self._api_client.async_api_deviceBaseDetailList([self._device_id])\n    if \"deviceList\" not in device_array or len(device_array[\"deviceList\"]) != 1:\n        raise InvalidResponse(f\"deviceList not found in {str(device_array)}\")\n    # reponse is an array, our data is in the first element\n    device_data = device_array[\"deviceList\"][0]\n    try:\n        # get device details\n        self._catalog = device_data[\"catalog\"]\n        self._firmware = device_data[\"version\"]\n        self._name = device_data[\"name\"]\n        self._device_model = device_data[\"deviceModel\"]\n        # get device capabilities\n        self._capabilities = device_data[\"ability\"].split(\",\")\n        # Add undocumented capabilities or capabilities inherited from other capabilities\n        self._capabilities.append(\"MotionDetect\")\n        if \"WLM\" in self._capabilities:\n            self._capabilities.append(\"Linkagewhitelight\")\n        if \"WLAN\" in self._capabilities:\n            self._capabilities.append(\"pushNotifications\")\n        switches_keys = IMOU_SWITCHES.keys()\n        # add switches. For each possible switch, check if there is a capability with the same name \\\n        # (ref. https://open.imoulife.com/book/en/faq/feature.html)\n        for switch_type in switches_keys:\n            for capability in self._capabilities:\n                capability = capability.lower()\n                capability = re.sub(\"v\\\\d$\", \"\", capability)\n                if switch_type.lower() == capability and switch_type.lower() not in self._switches:\n                    self._switches.append(switch_type)\n                    # create an instance and save it\n                    self._add_sensor_instance(\n                        \"switch\",\n                        ImouSwitch(\n                            self._api_client,\n                            self._device_id,\n                            self.get_name(),\n                            switch_type,\n                        ),\n                    )\n                    break\n        # identify sleepable devices\n        if \"Dormant\" in self._capabilities:\n            self._sleepable = True\n            self._add_sensor_instance(\n                \"sensor\",\n                ImouSensor(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"battery\",\n                ),\n            )\n        # add storageUsed sensor\n        if \"LocalStorage\" in self._capabilities:\n            self._add_sensor_instance(\n                \"sensor\",\n                ImouSensor(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"storageUsed\",\n                ),\n            )\n        # add callbackUrl sensor\n        self._add_sensor_instance(\n            \"sensor\",\n            ImouSensor(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"callbackUrl\",\n            ),\n        )\n        # add status sensor\n        self._add_sensor_instance(\n            \"sensor\",\n            ImouSensor(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"status\",\n            ),\n        )\n        # add online binary sensor\n        if \"WLAN\" in self._capabilities:\n            self._add_sensor_instance(\n                \"binary_sensor\",\n                ImouBinarySensor(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"online\",\n                ),\n            )\n        # add motionAlarm binary sensor\n        if \"AlarmMD\" in self._capabilities:\n            self._add_sensor_instance(\n                \"binary_sensor\",\n                ImouBinarySensor(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"motionAlarm\",\n                ),\n            )\n        # add nightVisionMode select\n        if \"NVM\" in self._capabilities:\n            self._add_sensor_instance(\n                \"select\",\n                ImouSelect(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"nightVisionMode\",\n                ),\n            )\n        # add restartDevice button\n        self._add_sensor_instance(\n            \"button\",\n            ImouButton(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"restartDevice\",\n            ),\n        )\n        # add refreshData button\n        self._add_sensor_instance(\n            \"button\",\n            ImouButton(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"refreshData\",\n            ),\n        )\n        # add refreshAlarm button\n        self._add_sensor_instance(\n            \"button\",\n            ImouButton(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"refreshAlarm\",\n            ),\n        )\n        # add siren siren\n        if \"Siren\" in self._capabilities:\n            self._add_sensor_instance(\n                \"siren\",\n                ImouSiren(\n                    self._api_client,\n                    self._device_id,\n                    self.get_name(),\n                    \"siren\",\n                ),\n            )\n        # add cameras\n        self._add_sensor_instance(\n            \"camera\",\n            ImouCamera(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"camera\",\n                \"HD\",\n            ),\n        )\n        self._add_sensor_instance(\n            \"camera\",\n            ImouCamera(\n                self._api_client,\n                self._device_id,\n                self.get_name(),\n                \"cameraSD\",\n                \"SD\",\n            ),\n        )\n    except Exception as exception:\n        raise InvalidResponse(f\" missing parameter or error parsing in {device_data}\") from exception\n    _LOGGER.debug(\"Retrieved device %s\", self.to_string())\n    _LOGGER.debug(\"Device details:\\n%s\", self.dump())\n    # keep track that we have already asked for the device details\n    self._initialized = True\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.async_refresh_status","title":"<code>async_refresh_status()</code>  <code>async</code>","text":"<p>Refresh status attribute.</p> Source code in <code>imouapi/device.py</code> <pre><code>async def async_refresh_status(self) -&gt; None:\n    \"\"\"Refresh status attribute.\"\"\"\n    data = await self._api_client.async_api_deviceOnline(self._device_id)\n    if \"onLine\" not in data or data[\"onLine\"] not in ONLINE_STATUS:\n        raise InvalidResponse(f\"onLine not valid in {data}\")\n    self._status = data[\"onLine\"]\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.async_wakeup","title":"<code>async_wakeup()</code>  <code>async</code>","text":"<p>Wake up a dormant device.</p> Source code in <code>imouapi/device.py</code> <pre><code>async def async_wakeup(self) -&gt; bool:\n    \"\"\"Wake up a dormant device.\"\"\"\n    # if this is a regular device, just return\n    if not self._sleepable:\n        return True\n    # if the device is already online, return\n    await self.async_refresh_status()\n    if ONLINE_STATUS[self._status] == \"Online\":\n        return True\n    # wake up the device\n    _LOGGER.debug(\"[%s] waking up the dormant device\", self.get_name())\n    await self._api_client.async_api_setDeviceCameraStatus(self._device_id, \"closeDormant\", True)\n    # wait for the device to be fully up\n    await asyncio.sleep(self._wait_after_wakeup)\n    # ensure the device is up\n    await self.async_refresh_status()\n    if ONLINE_STATUS[self._status] == \"Online\":\n        _LOGGER.debug(\"[%s] device is now online\", self.get_name())\n        return True\n    _LOGGER.warning(\"[%s] failed to wake up dormant device\", self.get_name())\n    return False\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.dump","title":"<code>dump()</code>","text":"<p>Return the full description of the object and its attributes.</p> Source code in <code>imouapi/device.py</code> <pre><code>def dump(self) -&gt; str:\n    \"\"\"Return the full description of the object and its attributes.\"\"\"\n    data = self.get_diagnostics()\n    dump = (\n        f\"- Device ID: {data['device']['device_id']}\\n\"\n        + f\"    Name: {data['device']['name']}\\n\"\n        + f\"    Catalog: {data['device']['catalog']}\\n\"\n        + f\"    Model: {data['device']['model']}\\n\"\n        + f\"    Firmware: {data['device']['firmware']}\\n\"\n        + f\"    Status: {ONLINE_STATUS[data['device']['status']]}\\n\"\n        + f\"    Sleepable: {data['device']['sleepable']}\\n\"\n    )\n    dump = dump + \"    Capabilities: \\n\"\n    for capability in data[\"capabilities\"]:\n        dump = dump + f\"        - {capability['description']}\\n\"\n    dump = dump + \"    Switches: \\n\"\n    for sensor in data[\"switches\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    dump = dump + \"    Sensors: \\n\"\n    for sensor in data[\"sensors\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    dump = dump + \"    Binary Sensors: \\n\"\n    for sensor in data[\"binary_sensors\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    dump = dump + \"    Select: \\n\"\n    for sensor in data[\"selects\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']}: {sensor['current_option']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    dump = dump + \"    Buttons: \\n\"\n    for sensor in data[\"buttons\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    dump = dump + \"    Sirens: \\n\"\n    for sensor in data[\"sirens\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']}: {sensor['state']} {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    dump = dump + \"    Cameras: \\n\"\n    for sensor in data[\"cameras\"]:\n        dump = (\n            dump\n            + f\"        - {sensor['description']}: {sensor['attributes'] if len(sensor['attributes']) &gt; 0 else ''}\\n\"  # noqa: E501\n        )\n    return dump\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_all_sensors","title":"<code>get_all_sensors()</code>","text":"<p>Get all the sensor instances.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_all_sensors(self) -&gt; List[ImouEntity]:\n    \"\"\"Get all the sensor instances.\"\"\"\n    sensors = []\n    for (\n        platform,  # pylint: disable=unused-variable\n        sensor_instances_array,\n    ) in self._sensor_instances.items():\n        for sensor_instance in sensor_instances_array:\n            sensors.append(sensor_instance)\n    return sensors\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_api_client","title":"<code>get_api_client()</code>","text":"<p>Get api client.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_api_client(self) -&gt; ImouAPIClient:\n    \"\"\"Get api client.\"\"\"\n    return self._api_client\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_camera_wait_before_download","title":"<code>get_camera_wait_before_download()</code>","text":"<p>Get camera wait before download.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_camera_wait_before_download(self) -&gt; float:\n    \"\"\"Get camera wait before download.\"\"\"\n    return self._camera_wait_before_download\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_device_id","title":"<code>get_device_id()</code>","text":"<p>Get device id.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_device_id(self) -&gt; str:\n    \"\"\"Get device id.\"\"\"\n    return self._device_id\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_diagnostics","title":"<code>get_diagnostics()</code>","text":"<p>Return diagnostics for the device.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_diagnostics(self) -&gt; Dict[str, Any]:\n    \"\"\"Return diagnostics for the device.\"\"\"\n    # prepare capabilities\n    capabilities = []\n    for capability_name in self._capabilities:\n        capability = {}\n        description = (\n            f\"{IMOU_CAPABILITIES[capability_name]} ({capability_name})\"\n            if capability_name in IMOU_CAPABILITIES\n            else capability_name\n        )\n        capability[\"name\"] = capability_name\n        capability[\"description\"] = description\n        capabilities.append(capability)\n    # prepare switches\n    switches = []\n    for sensor_instance in self._sensor_instances[\"switch\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = (\n            f\"{IMOU_SWITCHES[sensor_name]} ({sensor_name})\" if sensor_name in IMOU_SWITCHES else sensor_name\n        )\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"state\"] = sensor_instance.is_on()\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        switches.append(sensor)\n    # prepare sensors\n    sensors = []\n    for sensor_instance in self._sensor_instances[\"sensor\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = f\"{SENSORS[sensor_name]} ({sensor_name})\"\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"state\"] = sensor_instance.get_state()\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        sensors.append(sensor)\n    # prepare binary sensors\n    binary_sensors = []\n    for sensor_instance in self._sensor_instances[\"binary_sensor\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = f\"{BINARY_SENSORS[sensor_name]} ({sensor_name})\"\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"state\"] = sensor_instance.is_on()\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        binary_sensors.append(sensor)\n    # prepare select\n    selects = []\n    for sensor_instance in self._sensor_instances[\"select\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = f\"{SELECT[sensor_name]} ({sensor_name})\"\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"current_option\"] = sensor_instance.get_current_option()\n        sensor[\"available_options\"] = sensor_instance.get_available_options()\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        selects.append(sensor)\n    # prepare button\n    buttons = []\n    for sensor_instance in self._sensor_instances[\"button\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = f\"{BUTTONS[sensor_name]} ({sensor_name})\"\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        buttons.append(sensor)\n    # prepare sirens\n    sirens = []\n    for sensor_instance in self._sensor_instances[\"siren\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = f\"{SIRENS[sensor_name]} ({sensor_name})\" if sensor_name in SIRENS else sensor_name\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"state\"] = sensor_instance.is_on()\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        sirens.append(sensor)\n    # prepare cameras\n    cameras = []\n    for sensor_instance in self._sensor_instances[\"camera\"]:\n        sensor = {}\n        sensor_name = sensor_instance.get_name()\n        description = f\"{CAMERAS[sensor_name]} ({sensor_name})\" if sensor_name in CAMERAS else sensor_name\n        sensor[\"name\"] = sensor_name\n        sensor[\"description\"] = description\n        sensor[\"is_enabled\"] = sensor_instance.is_enabled()\n        sensor[\"is_updated\"] = sensor_instance.is_updated()\n        sensor[\"attributes\"] = sensor_instance.get_attributes()\n        cameras.append(sensor)\n    # prepare data structure to return\n    data: Dict[str, Any] = {\n        \"api\": {\n            \"base_url\": self._api_client.get_base_url(),\n            \"timeout\": self._api_client.get_timeout(),\n            \"is_connected\": self._api_client.is_connected(),\n        },\n        \"device\": {\n            \"device_id\": self._device_id,\n            \"name\": self._name,\n            \"catalog\": self._catalog,\n            \"given_name\": self._given_name,\n            \"model\": self._device_model,\n            \"firmware\": self._firmware,\n            \"manufacturer\": self._manufacturer,\n            \"status\": self._status,\n            \"sleepable\": self._sleepable,\n        },\n        \"capabilities\": capabilities,\n        \"switches\": switches,\n        \"sensors\": sensors,\n        \"binary_sensors\": binary_sensors,\n        \"selects\": selects,\n        \"buttons\": buttons,\n        \"sirens\": sirens,\n        \"cameras\": cameras,\n    }\n    return data\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_firmware","title":"<code>get_firmware()</code>","text":"<p>Get firmware.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_firmware(self) -&gt; str:\n    \"\"\"Get firmware.\"\"\"\n    return self._firmware\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_manufacturer","title":"<code>get_manufacturer()</code>","text":"<p>Get manufacturer.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_manufacturer(self) -&gt; str:\n    \"\"\"Get manufacturer.\"\"\"\n    return self._manufacturer\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_model","title":"<code>get_model()</code>","text":"<p>Get model.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_model(self) -&gt; str:\n    \"\"\"Get model.\"\"\"\n    return self._device_model\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_name","title":"<code>get_name()</code>","text":"<p>Get device name.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_name(self) -&gt; str:\n    \"\"\"Get device name.\"\"\"\n    if self._given_name != \"\":\n        return self._given_name\n    return self._name\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sensor_by_name","title":"<code>get_sensor_by_name(name)</code>","text":"<p>Get sensor instance with a given name.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_sensor_by_name(\n    self, name: str\n) -&gt; Union[ImouSensor, ImouBinarySensor, ImouSwitch, ImouSelect, ImouButton, None]:\n    \"\"\"Get sensor instance with a given name.\"\"\"\n    for (\n        platform,  # pylint: disable=unused-variable\n        sensor_instances_array,\n    ) in self._sensor_instances.items():\n        for sensor_instance in sensor_instances_array:\n            if sensor_instance.get_name() == name:\n                return sensor_instance\n    return None\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sensors_by_platform","title":"<code>get_sensors_by_platform(platform)</code>","text":"<p>Get sensor instances associated to a given platform.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_sensors_by_platform(self, platform: str) -&gt; List[ImouEntity]:\n    \"\"\"Get sensor instances associated to a given platform.\"\"\"\n    if platform not in self._sensor_instances:\n        return []\n    return self._sensor_instances[platform]\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_sleepable","title":"<code>get_sleepable()</code>","text":"<p>Get sleepable.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_sleepable(self) -&gt; bool:\n    \"\"\"Get sleepable.\"\"\"\n    return self._sleepable\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_status","title":"<code>get_status()</code>","text":"<p>Get status.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_status(self) -&gt; str:\n    \"\"\"Get status.\"\"\"\n    return self._status\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.get_wait_after_wakeup","title":"<code>get_wait_after_wakeup()</code>","text":"<p>Get wait after wakeup.</p> Source code in <code>imouapi/device.py</code> <pre><code>def get_wait_after_wakeup(self) -&gt; float:\n    \"\"\"Get wait after wakeup.\"\"\"\n    return self._wait_after_wakeup\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.is_enabled","title":"<code>is_enabled()</code>","text":"<p>Is enabled.</p> Source code in <code>imouapi/device.py</code> <pre><code>def is_enabled(self) -&gt; bool:\n    \"\"\"Is enabled.\"\"\"\n    return self._enabled\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.is_online","title":"<code>is_online()</code>","text":"<p>Get online status.</p> Source code in <code>imouapi/device.py</code> <pre><code>def is_online(self) -&gt; bool:\n    \"\"\"Get online status.\"\"\"\n    return ONLINE_STATUS[self._status] == \"Online\" or ONLINE_STATUS[self._status] == \"Dormant\"\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.set_camera_wait_before_download","title":"<code>set_camera_wait_before_download(value)</code>","text":"<p>Set camera wait before download.</p> Source code in <code>imouapi/device.py</code> <pre><code>def set_camera_wait_before_download(self, value: float) -&gt; None:\n    \"\"\"Set camera wait before download.\"\"\"\n    self._camera_wait_before_download = value\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.set_enabled","title":"<code>set_enabled(value)</code>","text":"<p>Set enable.</p> Source code in <code>imouapi/device.py</code> <pre><code>def set_enabled(self, value: bool) -&gt; None:\n    \"\"\"Set enable.\"\"\"\n    self._enabled = value\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.set_name","title":"<code>set_name(given_name)</code>","text":"<p>Set device name.</p> Source code in <code>imouapi/device.py</code> <pre><code>def set_name(self, given_name: str) -&gt; None:\n    \"\"\"Set device name.\"\"\"\n    self._given_name = given_name\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.set_wait_after_wakeup","title":"<code>set_wait_after_wakeup(value)</code>","text":"<p>Set wait after wakeup.</p> Source code in <code>imouapi/device.py</code> <pre><code>def set_wait_after_wakeup(self, value: float) -&gt; None:\n    \"\"\"Set wait after wakeup.\"\"\"\n    self._wait_after_wakeup = value\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDevice.to_string","title":"<code>to_string()</code>","text":"<p>Return the object as a string.</p> Source code in <code>imouapi/device.py</code> <pre><code>def to_string(self) -&gt; str:\n    \"\"\"Return the object as a string.\"\"\"\n    return f\"{self._name} ({self._device_model}, serial {self._device_id})\"\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDiscoverService","title":"<code>ImouDiscoverService</code>","text":"<p>Class for discovering IMOU devices.</p> Source code in <code>imouapi/device.py</code> <pre><code>class ImouDiscoverService:\n    \"\"\"Class for discovering IMOU devices.\"\"\"\n\n    def __init__(self, api_client: ImouAPIClient) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an ImouAPIClient instance\n        \"\"\"\n        self._api_client = api_client\n\n    async def async_discover_devices(self) -&gt; dict:\n        \"\"\"Discover registered devices and return a dict device name -&gt; device object.\"\"\"\n        _LOGGER.debug(\"Starting discovery\")\n        # get the list of devices\n        devices_data = await self._api_client.async_api_deviceBaseList()\n        if \"deviceList\" not in devices_data or \"count\" not in devices_data:\n            raise InvalidResponse(f\"deviceList or count not found in {devices_data}\")\n        _LOGGER.debug(\"Discovered %d registered devices\", devices_data[\"count\"])\n        # extract the device id for each device\n        devices = {}\n        for device_data in devices_data[\"deviceList\"]:\n            # create a a device instance from the device id and initialize it\n            device = ImouDevice(self._api_client, device_data[\"deviceId\"])\n            try:\n                await device.async_initialize()\n                _LOGGER.debug(\"   - %s\", device.to_string())\n                devices[f\"{device.get_name()}\"] = device\n            except InvalidResponse as exception:\n                _LOGGER.warning(\n                    \"skipping unrecognized or unsupported device: \",\n                    exception.to_string(),\n                )\n        # return a dict with device name -&gt; device instance\n        return devices\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.__init__","title":"<code>__init__(api_client)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an ImouAPIClient instance</p> required Source code in <code>imouapi/device.py</code> <pre><code>def __init__(self, api_client: ImouAPIClient) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an ImouAPIClient instance\n    \"\"\"\n    self._api_client = api_client\n</code></pre>"},{"location":"modules/device/#imouapi.device.ImouDiscoverService.async_discover_devices","title":"<code>async_discover_devices()</code>  <code>async</code>","text":"<p>Discover registered devices and return a dict device name -&gt; device object.</p> Source code in <code>imouapi/device.py</code> <pre><code>async def async_discover_devices(self) -&gt; dict:\n    \"\"\"Discover registered devices and return a dict device name -&gt; device object.\"\"\"\n    _LOGGER.debug(\"Starting discovery\")\n    # get the list of devices\n    devices_data = await self._api_client.async_api_deviceBaseList()\n    if \"deviceList\" not in devices_data or \"count\" not in devices_data:\n        raise InvalidResponse(f\"deviceList or count not found in {devices_data}\")\n    _LOGGER.debug(\"Discovered %d registered devices\", devices_data[\"count\"])\n    # extract the device id for each device\n    devices = {}\n    for device_data in devices_data[\"deviceList\"]:\n        # create a a device instance from the device id and initialize it\n        device = ImouDevice(self._api_client, device_data[\"deviceId\"])\n        try:\n            await device.async_initialize()\n            _LOGGER.debug(\"   - %s\", device.to_string())\n            devices[f\"{device.get_name()}\"] = device\n        except InvalidResponse as exception:\n            _LOGGER.warning(\n                \"skipping unrecognized or unsupported device: \",\n                exception.to_string(),\n            )\n    # return a dict with device name -&gt; device instance\n    return devices\n</code></pre>"},{"location":"modules/device_entity/","title":"device_entity","text":"<p>Classes for representing entities beloging to an Imou device.</p>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor","title":"<code>ImouBinarySensor</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a sensor within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouBinarySensor(ImouEntity):\n    \"\"\"A representation of a sensor within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type from const BINARY_SENSORS\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, BINARY_SENSORS[sensor_type])\n        # keep track of the status of the sensor\n        self._state = None\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        # online sensor\n        if self._name == \"online\":\n            # get the device status\n            if self._device_instance is not None:\n                await self._device_instance.async_refresh_status()\n                self._state = self._device_instance.is_online()\n\n        # motionAlarm sensor\n        if self._name == \"motionAlarm\":\n            # get the time of the last alarm\n            data = await self.api_client.async_api_getAlarmMessage(self._device_id)\n            if \"alarms\" not in data:\n                raise InvalidResponse(f\"alarms not found in {data}\")\n            if len(data[\"alarms\"]) &gt; 0:\n                alarm = data[\"alarms\"][0]\n                if \"time\" not in alarm or \"type\" not in alarm or \"msgType\" not in alarm or \"deviceId\" not in alarm:\n                    raise InvalidResponse(f\"time, type, msgType or deviceId not found in {alarm}\")\n                # convert it into ISO 8601\n                alarm_time = datetime.utcfromtimestamp(alarm[\"time\"]).isoformat()\n                # if previously stored alarm time is different, an alarm occurred in the mean time\n                if \"alarm_time\" in self._attributes and alarm_time != self._attributes[\"alarm_time\"]:\n                    self._state = True\n                else:\n                    self._state = False\n                # save attributes\n                self._attributes = {\n                    \"alarm_time\": alarm_time,\n                    \"alarm_type\": alarm[\"msgType\"],\n                    \"alarm_code\": alarm[\"type\"],\n                }\n\n        _LOGGER.debug(\n            \"[%s] updating %s, value is %s %s\",\n            self._device_name,\n            self._description,\n            self._state,\n            self._attributes,\n        )\n        if not self._updated:\n            self._updated = True\n\n    def is_on(self) -&gt; Optional[bool]:\n        \"\"\"Return the status of the switch.\"\"\"\n        return self._state\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type from const BINARY_SENSORS</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type from const BINARY_SENSORS\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, BINARY_SENSORS[sensor_type])\n    # keep track of the status of the sensor\n    self._state = None\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    # online sensor\n    if self._name == \"online\":\n        # get the device status\n        if self._device_instance is not None:\n            await self._device_instance.async_refresh_status()\n            self._state = self._device_instance.is_online()\n\n    # motionAlarm sensor\n    if self._name == \"motionAlarm\":\n        # get the time of the last alarm\n        data = await self.api_client.async_api_getAlarmMessage(self._device_id)\n        if \"alarms\" not in data:\n            raise InvalidResponse(f\"alarms not found in {data}\")\n        if len(data[\"alarms\"]) &gt; 0:\n            alarm = data[\"alarms\"][0]\n            if \"time\" not in alarm or \"type\" not in alarm or \"msgType\" not in alarm or \"deviceId\" not in alarm:\n                raise InvalidResponse(f\"time, type, msgType or deviceId not found in {alarm}\")\n            # convert it into ISO 8601\n            alarm_time = datetime.utcfromtimestamp(alarm[\"time\"]).isoformat()\n            # if previously stored alarm time is different, an alarm occurred in the mean time\n            if \"alarm_time\" in self._attributes and alarm_time != self._attributes[\"alarm_time\"]:\n                self._state = True\n            else:\n                self._state = False\n            # save attributes\n            self._attributes = {\n                \"alarm_time\": alarm_time,\n                \"alarm_type\": alarm[\"msgType\"],\n                \"alarm_code\": alarm[\"type\"],\n            }\n\n    _LOGGER.debug(\n        \"[%s] updating %s, value is %s %s\",\n        self._device_name,\n        self._description,\n        self._state,\n        self._attributes,\n    )\n    if not self._updated:\n        self._updated = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouBinarySensor.is_on","title":"<code>is_on()</code>","text":"<p>Return the status of the switch.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def is_on(self) -&gt; Optional[bool]:\n    \"\"\"Return the status of the switch.\"\"\"\n    return self._state\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton","title":"<code>ImouButton</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a button within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouButton(ImouEntity):\n    \"\"\"A representation of a button within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type from const BUTTON\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, BUTTONS[sensor_type])\n\n    async def async_press(self) -&gt; None:\n        \"\"\"Press action.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        if self._name == \"restartDevice\":\n            # restart the device\n            await self.api_client.async_api_restartDevice(self._device_id)\n\n        _LOGGER.debug(\n            \"[%s] pressed button %s\",\n            self._device_name,\n            self._description,\n        )\n        if not self._updated:\n            self._updated = True\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        return\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type from const BUTTON</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type from const BUTTON\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, BUTTONS[sensor_type])\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton.async_press","title":"<code>async_press()</code>  <code>async</code>","text":"<p>Press action.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_press(self) -&gt; None:\n    \"\"\"Press action.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    if self._name == \"restartDevice\":\n        # restart the device\n        await self.api_client.async_api_restartDevice(self._device_id)\n\n    _LOGGER.debug(\n        \"[%s] pressed button %s\",\n        self._device_name,\n        self._description,\n    )\n    if not self._updated:\n        self._updated = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouButton.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    return\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera","title":"<code>ImouCamera</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a camera within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouCamera(ImouEntity):\n    \"\"\"A representation of a camera within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n        profile: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type (from the CAMERAS constant)\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, CAMERAS[sensor_type])\n        self._state = False\n        self._profile = profile\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n    async def async_get_image(self) -&gt; Union[bytes, None]:\n        \"\"\"Get image snapshot.\"\"\"\n        if not await self._async_is_ready():\n            return None\n        _LOGGER.debug(\n            \"[%s] requested an image snapshot\",\n            self._device_name,\n        )\n        # request a snapshot and get the url\n        data = await self.api_client.async_api_setDeviceSnapEnhanced(self._device_id)\n        if \"url\" not in data:\n            raise InvalidResponse(f\"url not found in {data}\")\n        url = data[\"url\"]\n        # wait for the image to be available\n        camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD\n        if self._device_instance is not None:\n            self._device_instance.get_camera_wait_before_download()\n        await asyncio.sleep(camera_wait_before_download)\n        # retrieve the image from the url\n        session = self.api_client.get_session()\n        if session is None:\n            raise NotConnected()\n        try:\n            response = await session.request(\"GET\", url, timeout=self.api_client.get_timeout())\n            if response.status != 200:\n                raise InvalidResponse(f\"status code {response.status}\")\n            image = await response.read()\n        except Exception as exception:\n            raise InvalidResponse(f\"unable to retrieve image from {url}: {exception}\") from exception\n        return image\n\n    async def async_open_stream(self) -&gt; None:\n        \"\"\"Open a new stream.\"\"\"\n        if not await self._async_is_ready():\n            return\n        _LOGGER.debug(\n            \"[%s] opening a new live stream\",\n            self._device_name,\n        )\n        # Create a device live broadcast address for profile\n        try:\n            data = await self.api_client.async_api_bindDeviceLive(self._device_id, self._profile)\n            if \"streams\" not in data or \"hls\" not in data[\"streams\"][0] or \"liveToken\" not in data:\n                raise InvalidResponse(f\"streams, hls or liveToken not found in {data}\")\n        except APIError as exception:\n            # The video live already exists\n            if \"LV1001\" in exception.to_string():\n                pass\n            else:\n                raise APIError from exception\n\n    async def async_get_existing_stream(self) -&gt; dict:\n        \"\"\"Get existing streams if any and return a data structure with url and token.\"\"\"\n        existing_stream = {\n            \"url\": None,\n            \"token\": None,\n        }\n        data = {}\n        # request existing live streaming information for the device\n        try:\n            data = await self.api_client.async_api_getLiveStreamInfo(self._device_id)\n        except APIError as exception:\n            # The video live does not exist\n            if \"LV1002\" in exception.to_string():\n                pass\n            else:\n                raise APIError from exception\n        # streams already available, find the right one\n        if \"streams\" in data:\n            for stream in data[\"streams\"]:\n                if (\n                    \"streamId\" not in stream\n                    or \"status\" not in stream\n                    or \"hls\" not in stream\n                    or \"liveToken\" not in stream\n                ):\n                    raise InvalidResponse(f\"streamId, status, liveToken, hls not found in {stream}\")\n                # identify the right stream for this profile\n                if (\n                    (\n                        (self._profile == \"HD\" and stream[\"streamId\"] == 0)\n                        or (self._profile == \"SD\" and stream[\"streamId\"] == 1)\n                    )\n                    and stream[\"hls\"].startswith(\"https://\")\n                    and stream[\"status\"] == \"1\"\n                ):\n                    existing_stream[\"url\"] = stream[\"hls\"]\n                    existing_stream[\"token\"] = stream[\"liveToken\"]\n                    break\n            if existing_stream[\"url\"] is None or existing_stream[\"token\"] is None:\n                raise InvalidResponse(f\"stream not found in {data}\")\n        # return a data structure containing the url and the token\n        return existing_stream\n\n    async def async_close_stream(self) -&gt; None:\n        \"\"\"Close a live stream.\"\"\"\n        # get the existing stream if any\n        existing_stream = await self.async_get_existing_stream()\n        if existing_stream[\"token\"] is not None:\n            await self.api_client.async_api_unbindLive(existing_stream[\"token\"])\n            _LOGGER.debug(\n                \"[%s] closing live stream\",\n                self._device_name,\n            )\n\n    async def async_get_stream_url(self) -&gt; dict:\n        \"\"\"Get a live stream URL, taking care of creating a stream if needed.\"\"\"\n        # get the existing stream if any\n        existing_stream = await self.async_get_existing_stream()\n        if existing_stream[\"url\"] is not None:\n            return existing_stream[\"url\"]\n        else:\n            # otherwise open the stream\n            await self.async_open_stream()\n            # get the right stream url and return it\n            existing_stream = await self.async_get_existing_stream()\n            if existing_stream[\"url\"] is None:\n                raise APIError(f\"unable to get live streaming, url not found in {existing_stream}\")\n            _LOGGER.debug(\"[%s] live streaming url: %s\", self._device_name, existing_stream[\"url\"])\n            return existing_stream[\"url\"]\n\n    async def async_service_ptz_location(self, horizontal: float, vertical: float, zoom: float) -&gt; dict:\n        \"\"\"Perform PTZ location action.\"\"\"\n        _LOGGER.debug(\n            \"[%s] invoked PTZ location action horizontal:%f, vertical:%f, zoom:%f\",\n            self._device_name,\n            horizontal,\n            vertical,\n            zoom,\n        )\n        return await self.api_client.async_api_controlLocationPTZ(\n            self._device_id,\n            horizontal,\n            vertical,\n            zoom,\n        )\n\n    async def async_service_ptz_move(self, operation: str, duration: int) -&gt; dict:\n        \"\"\"Perform PTZ move action.\"\"\"\n        _LOGGER.debug(\n            \"[%s] invoked PTZ move action. operation:%s, duration:%i\",\n            self._device_name,\n            operation,\n            duration,\n        )\n        return await self.api_client.async_api_controlMovePTZ(\n            self._device_id,\n            operation,\n            duration,\n        )\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type, profile)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type (from the CAMERAS constant)</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n    profile: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type (from the CAMERAS constant)\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, CAMERAS[sensor_type])\n    self._state = False\n    self._profile = profile\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_close_stream","title":"<code>async_close_stream()</code>  <code>async</code>","text":"<p>Close a live stream.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_close_stream(self) -&gt; None:\n    \"\"\"Close a live stream.\"\"\"\n    # get the existing stream if any\n    existing_stream = await self.async_get_existing_stream()\n    if existing_stream[\"token\"] is not None:\n        await self.api_client.async_api_unbindLive(existing_stream[\"token\"])\n        _LOGGER.debug(\n            \"[%s] closing live stream\",\n            self._device_name,\n        )\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_get_existing_stream","title":"<code>async_get_existing_stream()</code>  <code>async</code>","text":"<p>Get existing streams if any and return a data structure with url and token.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_get_existing_stream(self) -&gt; dict:\n    \"\"\"Get existing streams if any and return a data structure with url and token.\"\"\"\n    existing_stream = {\n        \"url\": None,\n        \"token\": None,\n    }\n    data = {}\n    # request existing live streaming information for the device\n    try:\n        data = await self.api_client.async_api_getLiveStreamInfo(self._device_id)\n    except APIError as exception:\n        # The video live does not exist\n        if \"LV1002\" in exception.to_string():\n            pass\n        else:\n            raise APIError from exception\n    # streams already available, find the right one\n    if \"streams\" in data:\n        for stream in data[\"streams\"]:\n            if (\n                \"streamId\" not in stream\n                or \"status\" not in stream\n                or \"hls\" not in stream\n                or \"liveToken\" not in stream\n            ):\n                raise InvalidResponse(f\"streamId, status, liveToken, hls not found in {stream}\")\n            # identify the right stream for this profile\n            if (\n                (\n                    (self._profile == \"HD\" and stream[\"streamId\"] == 0)\n                    or (self._profile == \"SD\" and stream[\"streamId\"] == 1)\n                )\n                and stream[\"hls\"].startswith(\"https://\")\n                and stream[\"status\"] == \"1\"\n            ):\n                existing_stream[\"url\"] = stream[\"hls\"]\n                existing_stream[\"token\"] = stream[\"liveToken\"]\n                break\n        if existing_stream[\"url\"] is None or existing_stream[\"token\"] is None:\n            raise InvalidResponse(f\"stream not found in {data}\")\n    # return a data structure containing the url and the token\n    return existing_stream\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_get_image","title":"<code>async_get_image()</code>  <code>async</code>","text":"<p>Get image snapshot.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_get_image(self) -&gt; Union[bytes, None]:\n    \"\"\"Get image snapshot.\"\"\"\n    if not await self._async_is_ready():\n        return None\n    _LOGGER.debug(\n        \"[%s] requested an image snapshot\",\n        self._device_name,\n    )\n    # request a snapshot and get the url\n    data = await self.api_client.async_api_setDeviceSnapEnhanced(self._device_id)\n    if \"url\" not in data:\n        raise InvalidResponse(f\"url not found in {data}\")\n    url = data[\"url\"]\n    # wait for the image to be available\n    camera_wait_before_download = CAMERA_WAIT_BEFORE_DOWNLOAD\n    if self._device_instance is not None:\n        self._device_instance.get_camera_wait_before_download()\n    await asyncio.sleep(camera_wait_before_download)\n    # retrieve the image from the url\n    session = self.api_client.get_session()\n    if session is None:\n        raise NotConnected()\n    try:\n        response = await session.request(\"GET\", url, timeout=self.api_client.get_timeout())\n        if response.status != 200:\n            raise InvalidResponse(f\"status code {response.status}\")\n        image = await response.read()\n    except Exception as exception:\n        raise InvalidResponse(f\"unable to retrieve image from {url}: {exception}\") from exception\n    return image\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_get_stream_url","title":"<code>async_get_stream_url()</code>  <code>async</code>","text":"<p>Get a live stream URL, taking care of creating a stream if needed.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_get_stream_url(self) -&gt; dict:\n    \"\"\"Get a live stream URL, taking care of creating a stream if needed.\"\"\"\n    # get the existing stream if any\n    existing_stream = await self.async_get_existing_stream()\n    if existing_stream[\"url\"] is not None:\n        return existing_stream[\"url\"]\n    else:\n        # otherwise open the stream\n        await self.async_open_stream()\n        # get the right stream url and return it\n        existing_stream = await self.async_get_existing_stream()\n        if existing_stream[\"url\"] is None:\n            raise APIError(f\"unable to get live streaming, url not found in {existing_stream}\")\n        _LOGGER.debug(\"[%s] live streaming url: %s\", self._device_name, existing_stream[\"url\"])\n        return existing_stream[\"url\"]\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_open_stream","title":"<code>async_open_stream()</code>  <code>async</code>","text":"<p>Open a new stream.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_open_stream(self) -&gt; None:\n    \"\"\"Open a new stream.\"\"\"\n    if not await self._async_is_ready():\n        return\n    _LOGGER.debug(\n        \"[%s] opening a new live stream\",\n        self._device_name,\n    )\n    # Create a device live broadcast address for profile\n    try:\n        data = await self.api_client.async_api_bindDeviceLive(self._device_id, self._profile)\n        if \"streams\" not in data or \"hls\" not in data[\"streams\"][0] or \"liveToken\" not in data:\n            raise InvalidResponse(f\"streams, hls or liveToken not found in {data}\")\n    except APIError as exception:\n        # The video live already exists\n        if \"LV1001\" in exception.to_string():\n            pass\n        else:\n            raise APIError from exception\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_service_ptz_location","title":"<code>async_service_ptz_location(horizontal, vertical, zoom)</code>  <code>async</code>","text":"<p>Perform PTZ location action.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_service_ptz_location(self, horizontal: float, vertical: float, zoom: float) -&gt; dict:\n    \"\"\"Perform PTZ location action.\"\"\"\n    _LOGGER.debug(\n        \"[%s] invoked PTZ location action horizontal:%f, vertical:%f, zoom:%f\",\n        self._device_name,\n        horizontal,\n        vertical,\n        zoom,\n    )\n    return await self.api_client.async_api_controlLocationPTZ(\n        self._device_id,\n        horizontal,\n        vertical,\n        zoom,\n    )\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_service_ptz_move","title":"<code>async_service_ptz_move(operation, duration)</code>  <code>async</code>","text":"<p>Perform PTZ move action.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_service_ptz_move(self, operation: str, duration: int) -&gt; dict:\n    \"\"\"Perform PTZ move action.\"\"\"\n    _LOGGER.debug(\n        \"[%s] invoked PTZ move action. operation:%s, duration:%i\",\n        self._device_name,\n        operation,\n        duration,\n    )\n    return await self.api_client.async_api_controlMovePTZ(\n        self._device_id,\n        operation,\n        duration,\n    )\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouCamera.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity","title":"<code>ImouEntity</code>","text":"<p>             Bases: <code>ABC</code></p> <p>A representation of a sensor within an Imou Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouEntity(ABC):\n    \"\"\"A representation of a sensor within an Imou Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n        sensor_description: str,\n    ) -&gt; None:\n        \"\"\"Initialize common parameters.\"\"\"\n        self.api_client = api_client\n        self._device_id = device_id\n        self._device_name = device_name\n        self._name = sensor_type\n        self._description = sensor_description\n        self._enabled = True\n        self._updated = False\n        self._device_instance = None\n        self._attributes: Dict[str, str] = {}\n\n    def get_device_id(self) -&gt; str:\n        \"\"\"Get device id.\"\"\"\n        return self._device_id\n\n    def get_name(self) -&gt; str:\n        \"\"\"Get name.\"\"\"\n        return self._name\n\n    def get_description(self) -&gt; str:\n        \"\"\"Get description.\"\"\"\n        return self._description\n\n    def set_enabled(self, value: bool) -&gt; None:\n        \"\"\"Set enable.\"\"\"\n        self._enabled = value\n\n    def is_enabled(self) -&gt; bool:\n        \"\"\"If enabled.\"\"\"\n        return self._enabled\n\n    def is_updated(self) -&gt; bool:\n        \"\"\"If has been updated at least once.\"\"\"\n        return self._updated\n\n    def set_device(self, device_instance) -&gt; None:\n        \"\"\"Set the device instance this entity is belonging to.\"\"\"\n        self._device_instance = device_instance\n\n    def get_attributes(self) -&gt; dict:\n        \"\"\"Entity attributes.\"\"\"\n        return self._attributes\n\n    async def _async_is_ready(self) -&gt; bool:\n        \"\"\"Check if the sensor is fully ready.\"\"\"\n        # check if the sensor is enabled\n        if not self._enabled:\n            return False\n        # wake up the device if a dormant device and sleeping\n        if self._device_instance is not None:\n            awake = await self._device_instance.async_wakeup()\n            if awake:\n                return True\n            return False\n        return True\n\n    @abstractmethod\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type, sensor_description)</code>","text":"<p>Initialize common parameters.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n    sensor_description: str,\n) -&gt; None:\n    \"\"\"Initialize common parameters.\"\"\"\n    self.api_client = api_client\n    self._device_id = device_id\n    self._device_name = device_name\n    self._name = sensor_type\n    self._description = sensor_description\n    self._enabled = True\n    self._updated = False\n    self._device_instance = None\n    self._attributes: Dict[str, str] = {}\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.async_update","title":"<code>async_update(**kwargs)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>@abstractmethod\nasync def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_attributes","title":"<code>get_attributes()</code>","text":"<p>Entity attributes.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_attributes(self) -&gt; dict:\n    \"\"\"Entity attributes.\"\"\"\n    return self._attributes\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_description","title":"<code>get_description()</code>","text":"<p>Get description.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_description(self) -&gt; str:\n    \"\"\"Get description.\"\"\"\n    return self._description\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_device_id","title":"<code>get_device_id()</code>","text":"<p>Get device id.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_device_id(self) -&gt; str:\n    \"\"\"Get device id.\"\"\"\n    return self._device_id\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.get_name","title":"<code>get_name()</code>","text":"<p>Get name.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_name(self) -&gt; str:\n    \"\"\"Get name.\"\"\"\n    return self._name\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.is_enabled","title":"<code>is_enabled()</code>","text":"<p>If enabled.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def is_enabled(self) -&gt; bool:\n    \"\"\"If enabled.\"\"\"\n    return self._enabled\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.is_updated","title":"<code>is_updated()</code>","text":"<p>If has been updated at least once.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def is_updated(self) -&gt; bool:\n    \"\"\"If has been updated at least once.\"\"\"\n    return self._updated\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.set_device","title":"<code>set_device(device_instance)</code>","text":"<p>Set the device instance this entity is belonging to.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def set_device(self, device_instance) -&gt; None:\n    \"\"\"Set the device instance this entity is belonging to.\"\"\"\n    self._device_instance = device_instance\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouEntity.set_enabled","title":"<code>set_enabled(value)</code>","text":"<p>Set enable.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def set_enabled(self, value: bool) -&gt; None:\n    \"\"\"Set enable.\"\"\"\n    self._enabled = value\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect","title":"<code>ImouSelect</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a select within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouSelect(ImouEntity):\n    \"\"\"A representation of a select within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type from const SELECT\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, SELECT[sensor_type])\n        # keep track of the status of the sensor\n        self._current_option: Union[str, None] = None\n        self._available_options: List[str] = []\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        if self._name == \"nightVisionMode\":\n            # get the night vision mode option selected\n            data = await self.api_client.async_api_getNightVisionMode(self._device_id)\n            if \"mode\" not in data or \"modes\" not in data:\n                raise InvalidResponse(f\"mode or modes not found in {data}\")\n            self._current_option = data[\"mode\"]\n            self._available_options = data[\"modes\"]\n        _LOGGER.debug(\n            \"[%s] updating %s, value is %s %s\",\n            self._device_name,\n            self._description,\n            self._current_option,\n            self._attributes,\n        )\n        if not self._updated:\n            self._updated = True\n\n    def get_current_option(self) -&gt; Optional[str]:\n        \"\"\"Return the current option.\"\"\"\n        return self._current_option\n\n    def get_available_options(self) -&gt; List[str]:\n        \"\"\"Return the available options.\"\"\"\n        return self._available_options\n\n    async def async_select_option(self, option: str) -&gt; None:\n        \"\"\"Change the selected option.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        _LOGGER.debug(\"[%s] %s setting to %s\", self._device_name, self._description, option)\n        if self._name == \"nightVisionMode\":\n            await self.api_client.async_api_setNightVisionMode(self._device_id, option)\n            self._current_option = option\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type from const SELECT</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type from const SELECT\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, SELECT[sensor_type])\n    # keep track of the status of the sensor\n    self._current_option: Union[str, None] = None\n    self._available_options: List[str] = []\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.async_select_option","title":"<code>async_select_option(option)</code>  <code>async</code>","text":"<p>Change the selected option.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_select_option(self, option: str) -&gt; None:\n    \"\"\"Change the selected option.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    _LOGGER.debug(\"[%s] %s setting to %s\", self._device_name, self._description, option)\n    if self._name == \"nightVisionMode\":\n        await self.api_client.async_api_setNightVisionMode(self._device_id, option)\n        self._current_option = option\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    if self._name == \"nightVisionMode\":\n        # get the night vision mode option selected\n        data = await self.api_client.async_api_getNightVisionMode(self._device_id)\n        if \"mode\" not in data or \"modes\" not in data:\n            raise InvalidResponse(f\"mode or modes not found in {data}\")\n        self._current_option = data[\"mode\"]\n        self._available_options = data[\"modes\"]\n    _LOGGER.debug(\n        \"[%s] updating %s, value is %s %s\",\n        self._device_name,\n        self._description,\n        self._current_option,\n        self._attributes,\n    )\n    if not self._updated:\n        self._updated = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.get_available_options","title":"<code>get_available_options()</code>","text":"<p>Return the available options.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_available_options(self) -&gt; List[str]:\n    \"\"\"Return the available options.\"\"\"\n    return self._available_options\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSelect.get_current_option","title":"<code>get_current_option()</code>","text":"<p>Return the current option.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_current_option(self) -&gt; Optional[str]:\n    \"\"\"Return the current option.\"\"\"\n    return self._current_option\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor","title":"<code>ImouSensor</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a sensor within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouSensor(ImouEntity):\n    \"\"\"A representation of a sensor within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type from const SENSORS\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, SENSORS[sensor_type])\n        # keep track of the status of the sensor\n        self._state = None\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        # storageUsed sensor\n        elif self._name == \"storageUsed\":\n            # get SD card status\n            data = await self.api_client.async_api_deviceSdcardStatus(self._device_id)\n            if \"status\" not in data:\n                raise InvalidResponse(f\"status not found in {data}\")\n            if data[\"status\"] == \"normal\":\n                # get the storage status\n                data = await self.api_client.async_api_deviceStorage(self._device_id)\n                if \"totalBytes\" not in data or \"usedBytes\" not in data:\n                    raise InvalidResponse(f\"totalBytes or usedBytes not found in {data}\")\n                percentage_used = int(data[\"usedBytes\"] * 100 / data[\"totalBytes\"])\n                self._state = percentage_used\n\n        # callbackUrl sensor\n        elif self._name == \"callbackUrl\":\n            # get callback url\n            data = await self.api_client.async_api_getMessageCallback()\n            if \"callbackUrl\" not in data:\n                raise InvalidResponse(f\"callbackUrl not found in {data}\")\n            self._state = data[\"callbackUrl\"]\n\n        # status sensor\n        if self._name == \"status\":\n            # get the device status\n            data = await self.api_client.async_api_deviceOnline(self._device_id)\n            if \"onLine\" not in data:\n                raise InvalidResponse(f\"onLine not found in {data}\")\n            if data[\"onLine\"] in ONLINE_STATUS:\n                self._state = ONLINE_STATUS[data[\"onLine\"]]\n            else:\n                self._state = ONLINE_STATUS[\"UNKNOWN\"]\n\n        # battery sensor\n        elif self._name == \"battery\":\n            data = await self.api_client.async_api_getDevicePowerInfo(self._device_id)\n            if (\n                \"electricitys\" not in data\n                or (not hasattr(data[\"electricitys\"], \"__len__\"))\n                or len(data[\"electricitys\"]) == 0\n                or \"type\" not in data[\"electricitys\"][0]\n                or \"electric\" not in data[\"electricitys\"][0]\n            ):\n                raise InvalidResponse(f\"electricitys not found in {data}\")\n            percentage = data[\"electricitys\"][0][\"electric\"]\n            self._state = percentage\n\n        _LOGGER.debug(\n            \"[%s] updating %s, value is %s %s\",\n            self._device_name,\n            self._description,\n            self._state,\n            self._attributes,\n        )\n        if not self._updated:\n            self._updated = True\n\n    def get_state(self) -&gt; Optional[str]:\n        \"\"\"Return the state.\"\"\"\n        return self._state\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type from const SENSORS</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type from const SENSORS\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, SENSORS[sensor_type])\n    # keep track of the status of the sensor\n    self._state = None\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    # storageUsed sensor\n    elif self._name == \"storageUsed\":\n        # get SD card status\n        data = await self.api_client.async_api_deviceSdcardStatus(self._device_id)\n        if \"status\" not in data:\n            raise InvalidResponse(f\"status not found in {data}\")\n        if data[\"status\"] == \"normal\":\n            # get the storage status\n            data = await self.api_client.async_api_deviceStorage(self._device_id)\n            if \"totalBytes\" not in data or \"usedBytes\" not in data:\n                raise InvalidResponse(f\"totalBytes or usedBytes not found in {data}\")\n            percentage_used = int(data[\"usedBytes\"] * 100 / data[\"totalBytes\"])\n            self._state = percentage_used\n\n    # callbackUrl sensor\n    elif self._name == \"callbackUrl\":\n        # get callback url\n        data = await self.api_client.async_api_getMessageCallback()\n        if \"callbackUrl\" not in data:\n            raise InvalidResponse(f\"callbackUrl not found in {data}\")\n        self._state = data[\"callbackUrl\"]\n\n    # status sensor\n    if self._name == \"status\":\n        # get the device status\n        data = await self.api_client.async_api_deviceOnline(self._device_id)\n        if \"onLine\" not in data:\n            raise InvalidResponse(f\"onLine not found in {data}\")\n        if data[\"onLine\"] in ONLINE_STATUS:\n            self._state = ONLINE_STATUS[data[\"onLine\"]]\n        else:\n            self._state = ONLINE_STATUS[\"UNKNOWN\"]\n\n    # battery sensor\n    elif self._name == \"battery\":\n        data = await self.api_client.async_api_getDevicePowerInfo(self._device_id)\n        if (\n            \"electricitys\" not in data\n            or (not hasattr(data[\"electricitys\"], \"__len__\"))\n            or len(data[\"electricitys\"]) == 0\n            or \"type\" not in data[\"electricitys\"][0]\n            or \"electric\" not in data[\"electricitys\"][0]\n        ):\n            raise InvalidResponse(f\"electricitys not found in {data}\")\n        percentage = data[\"electricitys\"][0][\"electric\"]\n        self._state = percentage\n\n    _LOGGER.debug(\n        \"[%s] updating %s, value is %s %s\",\n        self._device_name,\n        self._description,\n        self._state,\n        self._attributes,\n    )\n    if not self._updated:\n        self._updated = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSensor.get_state","title":"<code>get_state()</code>","text":"<p>Return the state.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def get_state(self) -&gt; Optional[str]:\n    \"\"\"Return the state.\"\"\"\n    return self._state\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren","title":"<code>ImouSiren</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a siren within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouSiren(ImouEntity):\n    \"\"\"A representation of a siren within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type (from the SIRENS constant)\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, SIRENS[sensor_type])\n        self._state = False\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        # siren sensor\n        if self._name == \"siren\":\n            # async_api_getDeviceCameraStatus() does not return the current state of the siren, do nothing here\n            pass\n\n    def is_on(self) -&gt; Optional[bool]:\n        \"\"\"Return the status of the switch.\"\"\"\n        return self._state\n\n    async def async_turn_on(self, **kwargs):\n        \"\"\"Turn the entity on.\"\"\"\n        if not await self._async_is_ready():\n            return\n        _LOGGER.debug(\n            \"[%s] %s requested to turn ON (%s)\",\n            self._device_name,\n            self._description,\n            kwargs,\n        )\n        # siren sensor\n        if self._name == \"siren\":\n            await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, True)\n        self._state = True\n\n    async def async_turn_off(self, **kwargs):\n        \"\"\"Turn the entity off.\"\"\"\n        if not await self._async_is_ready():\n            return\n        _LOGGER.debug(\n            \"[%s] %s requested to turn OFF (%s)\",\n            self._device_name,\n            self._description,\n            kwargs,\n        )\n        # siren sensor\n        if self._name == \"siren\":\n            await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, False)\n        self._state = False\n\n    async def async_toggle(self, **kwargs):\n        \"\"\"Toggle the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n        if self._state:\n            await self.async_turn_off()\n        else:\n            await self.async_turn_on()\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type (from the SIRENS constant)</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type (from the SIRENS constant)\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, SIRENS[sensor_type])\n    self._state = False\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_toggle","title":"<code>async_toggle(**kwargs)</code>  <code>async</code>","text":"<p>Toggle the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_toggle(self, **kwargs):\n    \"\"\"Toggle the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n    if self._state:\n        await self.async_turn_off()\n    else:\n        await self.async_turn_on()\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_turn_off","title":"<code>async_turn_off(**kwargs)</code>  <code>async</code>","text":"<p>Turn the entity off.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_turn_off(self, **kwargs):\n    \"\"\"Turn the entity off.\"\"\"\n    if not await self._async_is_ready():\n        return\n    _LOGGER.debug(\n        \"[%s] %s requested to turn OFF (%s)\",\n        self._device_name,\n        self._description,\n        kwargs,\n    )\n    # siren sensor\n    if self._name == \"siren\":\n        await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, False)\n    self._state = False\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_turn_on","title":"<code>async_turn_on(**kwargs)</code>  <code>async</code>","text":"<p>Turn the entity on.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_turn_on(self, **kwargs):\n    \"\"\"Turn the entity on.\"\"\"\n    if not await self._async_is_ready():\n        return\n    _LOGGER.debug(\n        \"[%s] %s requested to turn ON (%s)\",\n        self._device_name,\n        self._description,\n        kwargs,\n    )\n    # siren sensor\n    if self._name == \"siren\":\n        await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, True)\n    self._state = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    # siren sensor\n    if self._name == \"siren\":\n        # async_api_getDeviceCameraStatus() does not return the current state of the siren, do nothing here\n        pass\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSiren.is_on","title":"<code>is_on()</code>","text":"<p>Return the status of the switch.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def is_on(self) -&gt; Optional[bool]:\n    \"\"\"Return the status of the switch.\"\"\"\n    return self._state\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch","title":"<code>ImouSwitch</code>","text":"<p>             Bases: <code>ImouEntity</code></p> <p>A representation of a switch within an IMOU Device.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>class ImouSwitch(ImouEntity):\n    \"\"\"A representation of a switch within an IMOU Device.\"\"\"\n\n    def __init__(\n        self,\n        api_client: ImouAPIClient,\n        device_id: str,\n        device_name: str,\n        sensor_type: str,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the instance.\n\n        Parameters:\n            api_client: an instance ofthe API client\n            device_id: the device id\n            device_name: the device name\n            sensor_type: the sensor type (from the SWITCHES constant)\n        \"\"\"\n        super().__init__(api_client, device_id, device_name, sensor_type, IMOU_SWITCHES[sensor_type])\n        self._state = None\n\n    async def async_update(self, **kwargs):\n        \"\"\"Update the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        # pushNotifications sensor\n        if self._name == \"pushNotifications\":\n            data = await self.api_client.async_api_getMessageCallback()\n\n        # all the other dynamically created sensors\n        else:\n            data = await self.api_client.async_api_getDeviceCameraStatus(self._device_id, self._name)\n        _LOGGER.debug(\n            \"[%s] updating %s, value is %s %s\",\n            self._device_name,\n            self._description,\n            data[\"status\"].upper(),\n            self._attributes,\n        )\n        self._state = data[\"status\"] == \"on\"\n        if not self._updated:\n            self._updated = True\n\n    def is_on(self) -&gt; Optional[bool]:\n        \"\"\"Return the status of the switch.\"\"\"\n        return self._state\n\n    async def async_turn_on(self, **kwargs):\n        \"\"\"Turn the entity on.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        _LOGGER.debug(\n            \"[%s] %s requested to turn ON (%s)\",\n            self._device_name,\n            self._description,\n            kwargs,\n        )\n        # pushNotifications sensor\n        if self._name == \"pushNotifications\":\n            if \"url\" not in kwargs:\n                raise APIError(\"url not provided\")\n            await self.api_client.async_api_setMessageCallbackOn(kwargs.get(\"url\"))\n        # all the other dynamically created sensors\n        else:\n            await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, True)\n        self._state = True\n\n    async def async_turn_off(self, **kwargs):\n        \"\"\"Turn the entity off.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        _LOGGER.debug(\n            \"[%s] %s requested to turn OFF (%s)\",\n            self._device_name,\n            self._description,\n            kwargs,\n        )\n        if self._name == \"pushNotifications\":\n            await self.api_client.async_api_setMessageCallbackOff()\n        # all the other dynamically created sensors\n        else:\n            await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, False)\n        self._state = False\n\n    async def async_toggle(self, **kwargs):\n        \"\"\"Toggle the entity.\"\"\"\n        if not await self._async_is_ready():\n            return\n\n        if self._state:\n            await self.async_turn_off()\n        else:\n            await self.async_turn_on()\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.__init__","title":"<code>__init__(api_client, device_id, device_name, sensor_type)</code>","text":"<p>Initialize the instance.</p> <p>Parameters:</p> Name Type Description Default <code>api_client</code> <code>ImouAPIClient</code> <p>an instance ofthe API client</p> required <code>device_id</code> <code>str</code> <p>the device id</p> required <code>device_name</code> <code>str</code> <p>the device name</p> required <code>sensor_type</code> <code>str</code> <p>the sensor type (from the SWITCHES constant)</p> required Source code in <code>imouapi/device_entity.py</code> <pre><code>def __init__(\n    self,\n    api_client: ImouAPIClient,\n    device_id: str,\n    device_name: str,\n    sensor_type: str,\n) -&gt; None:\n    \"\"\"\n    Initialize the instance.\n\n    Parameters:\n        api_client: an instance ofthe API client\n        device_id: the device id\n        device_name: the device name\n        sensor_type: the sensor type (from the SWITCHES constant)\n    \"\"\"\n    super().__init__(api_client, device_id, device_name, sensor_type, IMOU_SWITCHES[sensor_type])\n    self._state = None\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_toggle","title":"<code>async_toggle(**kwargs)</code>  <code>async</code>","text":"<p>Toggle the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_toggle(self, **kwargs):\n    \"\"\"Toggle the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    if self._state:\n        await self.async_turn_off()\n    else:\n        await self.async_turn_on()\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_turn_off","title":"<code>async_turn_off(**kwargs)</code>  <code>async</code>","text":"<p>Turn the entity off.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_turn_off(self, **kwargs):\n    \"\"\"Turn the entity off.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    _LOGGER.debug(\n        \"[%s] %s requested to turn OFF (%s)\",\n        self._device_name,\n        self._description,\n        kwargs,\n    )\n    if self._name == \"pushNotifications\":\n        await self.api_client.async_api_setMessageCallbackOff()\n    # all the other dynamically created sensors\n    else:\n        await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, False)\n    self._state = False\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_turn_on","title":"<code>async_turn_on(**kwargs)</code>  <code>async</code>","text":"<p>Turn the entity on.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_turn_on(self, **kwargs):\n    \"\"\"Turn the entity on.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    _LOGGER.debug(\n        \"[%s] %s requested to turn ON (%s)\",\n        self._device_name,\n        self._description,\n        kwargs,\n    )\n    # pushNotifications sensor\n    if self._name == \"pushNotifications\":\n        if \"url\" not in kwargs:\n            raise APIError(\"url not provided\")\n        await self.api_client.async_api_setMessageCallbackOn(kwargs.get(\"url\"))\n    # all the other dynamically created sensors\n    else:\n        await self.api_client.async_api_setDeviceCameraStatus(self._device_id, self._name, True)\n    self._state = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.async_update","title":"<code>async_update(**kwargs)</code>  <code>async</code>","text":"<p>Update the entity.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>async def async_update(self, **kwargs):\n    \"\"\"Update the entity.\"\"\"\n    if not await self._async_is_ready():\n        return\n\n    # pushNotifications sensor\n    if self._name == \"pushNotifications\":\n        data = await self.api_client.async_api_getMessageCallback()\n\n    # all the other dynamically created sensors\n    else:\n        data = await self.api_client.async_api_getDeviceCameraStatus(self._device_id, self._name)\n    _LOGGER.debug(\n        \"[%s] updating %s, value is %s %s\",\n        self._device_name,\n        self._description,\n        data[\"status\"].upper(),\n        self._attributes,\n    )\n    self._state = data[\"status\"] == \"on\"\n    if not self._updated:\n        self._updated = True\n</code></pre>"},{"location":"modules/device_entity/#imouapi.device_entity.ImouSwitch.is_on","title":"<code>is_on()</code>","text":"<p>Return the status of the switch.</p> Source code in <code>imouapi/device_entity.py</code> <pre><code>def is_on(self) -&gt; Optional[bool]:\n    \"\"\"Return the status of the switch.\"\"\"\n    return self._state\n</code></pre>"},{"location":"modules/exceptions/","title":"exceptions","text":"<p>Library exceptions.</p>"},{"location":"modules/exceptions/#imouapi.exceptions.APIError","title":"<code>APIError</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Remote API error.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class APIError(ImouException):\n    \"\"\"Remote API error.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"api_error\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.APIError.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"api_error\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ConnectionFailed","title":"<code>ConnectionFailed</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Failed to connect to the API.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class ConnectionFailed(ImouException):\n    \"\"\"Failed to connect to the API.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"connection_failed\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ConnectionFailed.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"connection_failed\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.DeviceOffline","title":"<code>DeviceOffline</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Device is offline.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class DeviceOffline(ImouException):\n    \"\"\"Device is offline.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"device_offline\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.DeviceOffline.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"device_offline\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException","title":"<code>ImouException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Base exception.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class ImouException(Exception):\n    \"\"\"Base exception.\"\"\"\n\n    def __init__(self, message: str = \"\") -&gt; None:\n        \"\"\"Initialize.\"\"\"\n        self.message = message\n        super().__init__(self.message)\n\n    def to_string(self) -&gt; str:\n        \"\"\"Return the exception as a string.\"\"\"\n        return f\"{self.__class__.__name__}: {self.message}\\n\" + self.traceback()\n\n    def traceback(self) -&gt; str:\n        \"\"\"Return the traceback as a string.\"\"\"\n        etype, value, trace = sys.exc_info()\n        return \"\".join(traceback.format_exception(etype, value, trace, None))\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"generic_error\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.__init__","title":"<code>__init__(message='')</code>","text":"<p>Initialize.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def __init__(self, message: str = \"\") -&gt; None:\n    \"\"\"Initialize.\"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"generic_error\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.to_string","title":"<code>to_string()</code>","text":"<p>Return the exception as a string.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def to_string(self) -&gt; str:\n    \"\"\"Return the exception as a string.\"\"\"\n    return f\"{self.__class__.__name__}: {self.message}\\n\" + self.traceback()\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.ImouException.traceback","title":"<code>traceback()</code>","text":"<p>Return the traceback as a string.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def traceback(self) -&gt; str:\n    \"\"\"Return the traceback as a string.\"\"\"\n    etype, value, trace = sys.exc_info()\n    return \"\".join(traceback.format_exception(etype, value, trace, None))\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidConfiguration","title":"<code>InvalidConfiguration</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Invalid App Id or App Secret provided.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class InvalidConfiguration(ImouException):\n    \"\"\"Invalid App Id or App Secret provided.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"invalid_configuration\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidConfiguration.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"invalid_configuration\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidResponse","title":"<code>InvalidResponse</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Malformed or unexpected API response.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class InvalidResponse(ImouException):\n    \"\"\"Malformed or unexpected API response.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"invalid_reponse\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.InvalidResponse.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"invalid_reponse\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.NotAuthorized","title":"<code>NotAuthorized</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Not authorized to operate on the device or invalid device id.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class NotAuthorized(ImouException):\n    \"\"\"Not authorized to operate on the device or invalid device id.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"not_authorized\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.NotAuthorized.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"not_authorized\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.NotConnected","title":"<code>NotConnected</code>","text":"<p>             Bases: <code>ImouException</code></p> <p>Action requested but not yet connected to the API.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>class NotConnected(ImouException):\n    \"\"\"Action requested but not yet connected to the API.\"\"\"\n\n    def get_title(self) -&gt; str:\n        \"\"\"Return the title of the exception which will be then translated.\"\"\"\n        return \"not_connected\"\n</code></pre>"},{"location":"modules/exceptions/#imouapi.exceptions.NotConnected.get_title","title":"<code>get_title()</code>","text":"<p>Return the title of the exception which will be then translated.</p> Source code in <code>imouapi/exceptions.py</code> <pre><code>def get_title(self) -&gt; str:\n    \"\"\"Return the title of the exception which will be then translated.\"\"\"\n    return \"not_connected\"\n</code></pre>"}]}